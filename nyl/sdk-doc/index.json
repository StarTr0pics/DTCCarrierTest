[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "sdk/ESigEventHandlers.js",
    "content": "import _ from 'lodash';\nimport logger from 'runtime/../../logger';\nimport moment from 'shared/moment';\nimport createESIGViewPDFModalWindow from 'runtime/sdk/components/ESIGViewPDFModalWindow.react';\nimport * as ft from 'shared/constants/FieldTypes';\nimport { FINISH_ESIG_UI_INTERNAL } from 'runtime/constants/MessageTypes';\nimport postMessageHelper from 'runtime/utils/postMessageHelper';\n\nconst _addCapturedEvent = (context, data) => {\n    if (!_.isArray(context.capturedEvents)) context.capturedEvents = [];\n\n    if (!_.isPlainObject(data)) data = {};\n\n    const { fieldName = '', fieldType = '', fieldValue = '', eventType = '' } = data;\n\n    const event = {\n        FieldName: fieldName,\n        FieldType: fieldType,\n        EventDate: moment.utc().format()\n    };\n\n    if (fieldType === ft.BUTTON) {\n        event.FieldValue = '';\n        event.EventType = 'click';\n    } else if (fieldType === ft.RADIOBUTTON) {\n        event.FieldValue = fieldValue;\n        event.EventType = 'click';\n    } else if (fieldType === ft.CHECKBOX) {\n        if (fieldValue === 'true') event.EventType = 'checked';\n        if (fieldValue === 'false') event.EventType = 'unchecked';\n        event.FieldValue = '';\n    } else {\n        event.FieldValue = fieldValue;\n        event.EventType = eventType;\n    }\n\n    context.capturedEvents.push(event);\n};\n\nconst _getCapturedEvents = context =>\n    _.isArray(context.capturedEvents) ? context.capturedEvents : [];\n\nconst _clearCapturedEvents = context => {\n    context.capturedEvents = [];\n};\n\n/**\n * eSig UI SDK class. Used as separate SDK class for eSig UI applications.\n */\nexport class ESigEventHandlers {\n    /**\n     * This method is invoked whenever runtime executes the \"capture event\" action in eSigUI\n     * @since v0.89.*\n     * @param {Object} data - event data\n     * @param {String} data.fieldName - name of a field that generated the event\n     * @param {String} data.fieldType - type of a field that generated the event\n     * @param {String} data.fieldValue - value of a field that generated the event\n     * @param {String} data.eventType - type of the event on a field that generated the capture event (e.g. 'click', 'valuechanged', etc.)\n     */\n    async ESIGUI_captureEvent(data) {\n        _addCapturedEvent(this, data);\n    }\n\n    async ESIGUI_flushAuditTrail() {\n        const serviceRequestProvider = this.coreApi.serviceRequestProvider;\n        const clientDataKey = this.coreApi.runtimeStateItems.CLIENT_DATA;\n        const capturedEvents = _getCapturedEvents(this);\n\n        const authToken = await this.requestAuthToken();\n\n        const { success, error, message } = await serviceRequestProvider.ESIGUI_flushAuditTrail(\n            capturedEvents,\n            authToken\n        );\n\n        this.coreApi.updateRuntimeState({\n            [clientDataKey]: {\n                ESIGUI_flushAuditTrail_isSuccessful: { value: success, formattedValue: success },\n                ESIGUI_flushAuditTrail_errorCode: { value: error, formattedValue: error },\n                ESIGUI_flushAuditTrail_errorMessage: { value: message, formattedValue: message }\n            }\n        });\n\n        _clearCapturedEvents(this);\n    }\n\n    /**\n     * This method is invoked whenever runtime executes the \"accept disclosure\" action in eSigUI.\n     * @since v0.89.*\n     */\n    async ESIGUI_acceptDisclosure() {\n        const serviceRequestProvider = this.coreApi.serviceRequestProvider;\n        const clientDataKey = this.coreApi.runtimeStateItems.CLIENT_DATA;\n\n        const authToken = await this.requestAuthToken();\n\n        const { success, error, message } = await serviceRequestProvider.ESIGUI_acceptDisclosure(\n            authToken\n        );\n\n        this.coreApi.updateRuntimeState({\n            [clientDataKey]: {\n                ESIGUI_disclosureAcceptance_isSuccessful: {\n                    value: success,\n                    formattedValue: success\n                },\n                ESIGUI_disclosureAcceptance_errorCode: { value: error, formattedValue: error },\n                ESIGUI_disclosureAcceptance_errorMessage: {\n                    value: message,\n                    formattedValue: message\n                }\n            }\n        });\n    }\n\n    /**\n     * This method is invoked whenever runtime executes the \"accept consent\" action in eSigUI.\n     * @since v0.89.*\n     */\n    async ESIGUI_acceptConsent() {\n        const serviceRequestProvider = this.coreApi.serviceRequestProvider;\n        const clientDataKey = this.coreApi.runtimeStateItems.CLIENT_DATA;\n\n        const authToken = await this.requestAuthToken();\n\n        const { success, error, message } = await serviceRequestProvider.ESIGUI_acceptConsent(\n            authToken\n        );\n\n        this.coreApi.updateRuntimeState({\n            [clientDataKey]: {\n                ESIGUI_consentAcceptance_isSuccessful: { value: success, formattedValue: success },\n                ESIGUI_consentAcceptance_errorCode: { value: error, formattedValue: error },\n                ESIGUI_consentAcceptance_errorMessage: { value: message, formattedValue: message }\n            }\n        });\n    }\n\n    /**\n     * This method is invoked whenever runtime executes the \"decline disclosure\" action in eSigUI.\n     * @since v0.89.*\n     */\n    async ESIGUI_declineDisclosure() {\n        const serviceRequestProvider = this.coreApi.serviceRequestProvider;\n        const clientDataKey = this.coreApi.runtimeStateItems.CLIENT_DATA;\n\n        const authToken = await this.requestAuthToken();\n\n        const { success, error, message } = await serviceRequestProvider.ESIGUI_declineDisclosure(\n            authToken\n        );\n\n        this.coreApi.updateRuntimeState({\n            [clientDataKey]: {\n                ESIGUI_disclosureDecline_isSuccessful: { value: success, formattedValue: success },\n                ESIGUI_disclosureDecline_errorCode: { value: error, formattedValue: error },\n                ESIGUI_disclosureDecline_errorMessage: { value: message, formattedValue: message }\n            }\n        });\n    }\n\n    /**\n     * This method is invoked whenever runtime executes the \"decline consent\" action in eSigUI.\n     * @since v0.89.*\n     */\n    async ESIGUI_declineConsent() {\n        const serviceRequestProvider = this.coreApi.serviceRequestProvider;\n        const clientDataKey = this.coreApi.runtimeStateItems.CLIENT_DATA;\n\n        const authToken = await this.requestAuthToken();\n\n        const { success, error, message } = await serviceRequestProvider.ESIGUI_declineConsent(\n            authToken\n        );\n\n        this.coreApi.updateRuntimeState({\n            [clientDataKey]: {\n                ESIGUI_consentDecline_isSuccessful: { value: success, formattedValue: success },\n                ESIGUI_consentDecline_errorCode: { value: error, formattedValue: error },\n                ESIGUI_consentDecline_errorMessage: { value: message, formattedValue: message }\n            }\n        });\n    }\n\n    /**\n     * This method is invoked whenever runtime executes the \"view PDF\" action in eSigUI (not to be confused with generic \"view PDF\", which is not eSig-specific)\n     * @since v0.89.*\n     */\n    async ESIGUI_viewPDF() {\n        const authToken = await this.requestAuthToken();\n\n        const { data } = await this.coreApi.serviceRequestProvider.ESIGUI_getPDFsURL(authToken);\n        const url = _.get(data, ['Signers', 0, 'DocumentViewUrl'], null);\n\n        if (!url) throw new Error('ESIGUI: Url for viewing document (pdf) was not provided');\n\n        this.coreApi.showModal(\n            createESIGViewPDFModalWindow({ pdfUrl: url, onClose: this.coreApi.hideModal })\n        );\n    }\n\n    /**\n     * This method is invoked whenever runtime executes the \"get signing status\" action in eSigUI (after the nested application receives a post message about signature completion)\n     * @since v0.89.*\n     * @returns {Promise<Object>} - promise of signing status\n     */\n    async ESIGUI_getSigningStatus() {\n        const ANY_ERROR_STATUS = -1;\n        const serviceRequestProvider = this.coreApi.serviceRequestProvider;\n        const clientDataKey = this.coreApi.runtimeStateItems.CLIENT_DATA;\n\n        const authToken = await this.requestAuthToken();\n\n        const response = await serviceRequestProvider.ESIGUI_getSigningStatus(authToken);\n        const { data, success, error, message } = response;\n        const status = _.get(data, ['DynamicData', 'StatusId'], ANY_ERROR_STATUS);\n\n        this.coreApi.updateRuntimeState({\n            [clientDataKey]: {\n                ESIGUI_vendorSigning_status: { value: status, formattedValue: status },\n                ESIGUI_vendorSigning_isSuccessful: { value: success, formattedValue: success },\n                ESIGUI_vendorSigning_errorCode: { value: error, formattedValue: error },\n                ESIGUI_vendorSigning_errorMessage: { value: message, formattedValue: message }\n            }\n        });\n\n        return status;\n    }\n\n    /**\n     * This method is invoked whenever runtime executes the \"get vendor URL\" action in eSigUI\n     * @since v0.89.*\n     * @returns {Promise<String>} - promise of the vendor URL\n     */\n    async ESIGUI_getVendorURL() {\n        const serviceRequestProvider = this.coreApi.serviceRequestProvider;\n        const clientDataKey = this.coreApi.runtimeStateItems.CLIENT_DATA;\n\n        const authToken = await this.requestAuthToken();\n\n        const response = await serviceRequestProvider.ESIGUI_getVendorURL(authToken);\n        const { data, success, error, message } = response;\n\n        this.coreApi.updateRuntimeState({\n            [clientDataKey]: {\n                ESIGUI_requestURL_isSuccessful: { value: success, formattedValue: success },\n                ESIGUI_requestURL_errorCode: { value: error, formattedValue: error },\n                ESIGUI_requestURL_errorMessage: { value: message, formattedValue: message }\n            }\n        });\n\n        return _.get(data, ['Signers', 0, 'SigningUrl'], null);\n    }\n\n    /**\n     * This method is invoked when nested application Runtime attempts to initialize with external data that has been transmitted from host application.\n     * @since v0.92.*\n     * @param {Object} data - ClientData from the host application, see format description in `SD Runtime fields data`;\n     * @returns {undefined}\n     */\n    initialLoadData(data) {\n        if (!data) return;\n\n        this.coreApi.restoreRuntimeState({\n            [this.coreApi.runtimeStateItems.CLIENT_DATA]: data\n        });\n    }\n\n    /**\n     * This method is invoked whenever runtime executes the \"finish signing\" action in eSigUI\n     * @since v0.92.*\n     */\n    async ESIGUI_finishSigning() {\n        postMessageHelper.sendMessageToParent({ type: FINISH_ESIG_UI_INTERNAL });\n    }\n\n    /**\n     * This helper method knows how to get authentication token for requests to esig service.\n     * @since v0.97.*\n     * @returns {string}\n     */\n    async requestAuthToken() {\n        const serviceRequestProvider = this.coreApi.serviceRequestProvider;\n        let authToken;\n\n        const maxNumberOfAttempts = 10; // TODO: take from config\n        let counter = 0;\n        while (!authToken && ++counter <= maxNumberOfAttempts) {\n            try {\n                authToken = await serviceRequestProvider.getEsigUIServiceAuthToken();\n            } catch (e) {\n                logger.runtime.coreApi.error(\n                    e,\n                    `failed to request ESIG authToken, attempt - ${counter}`\n                );\n            }\n        }\n\n        return authToken;\n    }\n}\n",
    "static": true,
    "longname": "/var/lib/jenkins/workspace/Screen Designer/NGEN - Screen Designer/ngen_screen_designer-0.107.5/src/runtime/sdk/ESigEventHandlers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "function",
    "name": "_addCapturedEvent",
    "memberof": "sdk/ESigEventHandlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "sdk/ESigEventHandlers.js~_addCapturedEvent",
    "access": "private",
    "export": false,
    "importPath": "ipln-scrd/sdk/ESigEventHandlers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2,
    "kind": "function",
    "name": "_getCapturedEvents",
    "memberof": "sdk/ESigEventHandlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "sdk/ESigEventHandlers.js~_getCapturedEvents",
    "access": "private",
    "export": false,
    "importPath": "ipln-scrd/sdk/ESigEventHandlers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 3,
    "kind": "function",
    "name": "_clearCapturedEvents",
    "memberof": "sdk/ESigEventHandlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "sdk/ESigEventHandlers.js~_clearCapturedEvents",
    "access": "private",
    "export": false,
    "importPath": "ipln-scrd/sdk/ESigEventHandlers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 4,
    "kind": "class",
    "name": "ESigEventHandlers",
    "memberof": "sdk/ESigEventHandlers.js",
    "static": true,
    "longname": "sdk/ESigEventHandlers.js~ESigEventHandlers",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/ESigEventHandlers.js",
    "importStyle": "{ESigEventHandlers}",
    "description": "eSig UI SDK class. Used as separate SDK class for eSig UI applications.",
    "lineNumber": 50,
    "interface": false
  },
  {
    "__docId__": 5,
    "kind": "method",
    "name": "ESIGUI_captureEvent",
    "memberof": "sdk/ESigEventHandlers.js~ESigEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/ESigEventHandlers.js~ESigEventHandlers#ESIGUI_captureEvent",
    "access": "public",
    "description": "This method is invoked whenever runtime executes the \"capture event\" action in eSigUI",
    "lineNumber": 60,
    "since": "v0.89.*",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "event data"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "data.fieldName",
        "description": "name of a field that generated the event"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "data.fieldType",
        "description": "type of a field that generated the event"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "data.fieldValue",
        "description": "value of a field that generated the event"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "data.eventType",
        "description": "type of the event on a field that generated the capture event (e.g. 'click', 'valuechanged', etc.)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 6,
    "kind": "method",
    "name": "ESIGUI_flushAuditTrail",
    "memberof": "sdk/ESigEventHandlers.js~ESigEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/ESigEventHandlers.js~ESigEventHandlers#ESIGUI_flushAuditTrail",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 7,
    "kind": "method",
    "name": "ESIGUI_acceptDisclosure",
    "memberof": "sdk/ESigEventHandlers.js~ESigEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/ESigEventHandlers.js~ESigEventHandlers#ESIGUI_acceptDisclosure",
    "access": "public",
    "description": "This method is invoked whenever runtime executes the \"accept disclosure\" action in eSigUI.",
    "lineNumber": 91,
    "since": "v0.89.*",
    "params": [],
    "return": null
  },
  {
    "__docId__": 8,
    "kind": "method",
    "name": "ESIGUI_acceptConsent",
    "memberof": "sdk/ESigEventHandlers.js~ESigEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/ESigEventHandlers.js~ESigEventHandlers#ESIGUI_acceptConsent",
    "access": "public",
    "description": "This method is invoked whenever runtime executes the \"accept consent\" action in eSigUI.",
    "lineNumber": 120,
    "since": "v0.89.*",
    "params": [],
    "return": null
  },
  {
    "__docId__": 9,
    "kind": "method",
    "name": "ESIGUI_declineDisclosure",
    "memberof": "sdk/ESigEventHandlers.js~ESigEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/ESigEventHandlers.js~ESigEventHandlers#ESIGUI_declineDisclosure",
    "access": "public",
    "description": "This method is invoked whenever runtime executes the \"decline disclosure\" action in eSigUI.",
    "lineNumber": 143,
    "since": "v0.89.*",
    "params": [],
    "return": null
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "ESIGUI_declineConsent",
    "memberof": "sdk/ESigEventHandlers.js~ESigEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/ESigEventHandlers.js~ESigEventHandlers#ESIGUI_declineConsent",
    "access": "public",
    "description": "This method is invoked whenever runtime executes the \"decline consent\" action in eSigUI.",
    "lineNumber": 166,
    "since": "v0.89.*",
    "params": [],
    "return": null
  },
  {
    "__docId__": 11,
    "kind": "method",
    "name": "ESIGUI_viewPDF",
    "memberof": "sdk/ESigEventHandlers.js~ESigEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/ESigEventHandlers.js~ESigEventHandlers#ESIGUI_viewPDF",
    "access": "public",
    "description": "This method is invoked whenever runtime executes the \"view PDF\" action in eSigUI (not to be confused with generic \"view PDF\", which is not eSig-specific)",
    "lineNumber": 189,
    "since": "v0.89.*",
    "params": [],
    "return": null
  },
  {
    "__docId__": 12,
    "kind": "method",
    "name": "ESIGUI_getSigningStatus",
    "memberof": "sdk/ESigEventHandlers.js~ESigEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/ESigEventHandlers.js~ESigEventHandlers#ESIGUI_getSigningStatus",
    "access": "public",
    "description": "This method is invoked whenever runtime executes the \"get signing status\" action in eSigUI (after the nested application receives a post message about signature completion)",
    "lineNumber": 207,
    "since": "v0.89.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - promise of signing status"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "promise of signing status"
    },
    "params": []
  },
  {
    "__docId__": 13,
    "kind": "method",
    "name": "ESIGUI_getVendorURL",
    "memberof": "sdk/ESigEventHandlers.js~ESigEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/ESigEventHandlers.js~ESigEventHandlers#ESIGUI_getVendorURL",
    "access": "public",
    "description": "This method is invoked whenever runtime executes the \"get vendor URL\" action in eSigUI",
    "lineNumber": 235,
    "since": "v0.89.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<String>} - promise of the vendor URL"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<String>"
      ],
      "spread": false,
      "description": "promise of the vendor URL"
    },
    "params": []
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "initialLoadData",
    "memberof": "sdk/ESigEventHandlers.js~ESigEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/ESigEventHandlers.js~ESigEventHandlers#initialLoadData",
    "access": "public",
    "description": "This method is invoked when nested application Runtime attempts to initialize with external data that has been transmitted from host application.",
    "lineNumber": 261,
    "since": "v0.92.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "ClientData from the host application, see format description in `SD Runtime fields data`;"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "ESIGUI_finishSigning",
    "memberof": "sdk/ESigEventHandlers.js~ESigEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/ESigEventHandlers.js~ESigEventHandlers#ESIGUI_finishSigning",
    "access": "public",
    "description": "This method is invoked whenever runtime executes the \"finish signing\" action in eSigUI",
    "lineNumber": 273,
    "since": "v0.92.*",
    "params": [],
    "return": null
  },
  {
    "__docId__": 16,
    "kind": "method",
    "name": "requestAuthToken",
    "memberof": "sdk/ESigEventHandlers.js~ESigEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/ESigEventHandlers.js~ESigEventHandlers#requestAuthToken",
    "access": "public",
    "description": "This helper method knows how to get authentication token for requests to esig service.",
    "lineNumber": 282,
    "since": "v0.97.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 17,
    "kind": "file",
    "name": "sdk/IGoSpecificGlobalEventHandlers.js",
    "content": "import _ from 'lodash';\nimport * as jsCAConfig from 'runtime/utils/jsCAConfig';\nimport additionalFTNIFieldsNames from 'runtime/constants/FTNIExtraDataFields';\nimport { LAST_PACKAGE_NAME, PACKAGE_XML } from 'runtime/constants/ClientDataFieldNames';\nimport { RuntimeFeatureDetector } from 'runtime/utils/appConfig';\nimport ViewPDFModalWindow from 'runtime/sdk/components/ViewPDFModalWindow.react';\nimport {\n    RUNTIME_FEATURE_VIEW_PDF,\n    RUNTIME_FEATURE_ACTIVATE_FORMS_PACKAGE_NO_REQUEST\n} from 'shared/constants/RuntimeFeatureSwitchConstants';\nimport { CA_FOR_VIEW_PDF } from 'shared/constants/PredefinedProductProperties';\nimport {\n    prepareDataToSave,\n    handleLoadedData,\n    handleInitialLoadedData,\n    getTimestampClientData,\n    getCallCustomAssemblyFunction\n} from 'runtime/sdk/IGoSpecificDataProcessors';\nimport postMessageHelper from 'runtime/utils/postMessageHelper';\nimport * as pom from 'runtime/constants/MessageTypes';\n// TODO: resolve circular dependency from RuntimeCoreAPI on GlobalEventHandlers (RuntimeCoreAPI -> ... RuntimeActionCreators.js -> ... EventManager.js -> ... call_service.js -> invokeGlobalEventHandlersHelper.js -> globalEventHandlersSelector.js -> -> IGoSpecificGlobalEventHandlers.js)\n\n/**\n * iGo-specific base SDK class.\n */\nexport class IGoSpecificGlobalEventHandlers {\n    /**\n     * Reference to SDK API functions.\n     * @example\n     * ExtensionClass.prototype.saveData = function() {\n     *     const clientData = this.coreApi.getRuntimeData();\n     *     //...\n     * }\n     */\n    coreApi; // declaring here just for documentation purposes. it actually doesn't affect the generated class\n\n    /**\n     * Superclass definition to provide access to implementation of base methods from SDK.\n     * @example\n     * ExtensionClass.prototype.callCustomAssembly = function(assemblyName) {\n     *     return this.superclass.callCustomAssembly(assemblyName);\n     * }\n     */\n    superclass; // declaring here just for documentation purposes. it actually doesn't affect the generated class\n\n    /**\n     * This method is invoked whenever Runtime makes a call to custom assembly (excluding custom assemblies for SourceGrid and SourceDropdown data retrieval).\n     * @since v0.56.*\n     * @param {String} assemblyName - name of custom assembly to call\n     * @returns {Promise} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.callCustomAssembly (superclass.callCustomAssembly returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined.\n     * @example\n     * ExtensionClass.prototype.callCustomAssembly = function(assemblyName) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *     switch(assemblyName) {\n     *         case: 'CustomAssembly1':\n     *             // update runtime data\n     *             break;\n     *         // handle calls to other custom assemblies\n     *     }\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.callCustomAssembly(assemblyName);\n     * }\n     */\n    callCustomAssembly(assemblyName) {\n        return getCallCustomAssemblyFunction(false).bind(this)(assemblyName);\n    }\n\n    /**\n     * This method is invoked whenever Runtime makes a call to JavaScript custom assembly. Invocation occurs synchronously for Rule and Event action. It is allowed to return Promise and execute asynchronous code ONLY for Event action.\n     * @since v0.77.*\n     * @param {String} assemblyName - name of JavaScript custom assembly to call\n     * @returns {undefined|Promise} - If implementation is synchronous you may return either undefined or resolved Promise. Return Promise of operation completion if implementation contains any asynchronous operations only valid for Event action.\n     * @example\n     * ExtensionClass.prototype.callJsCustomAssembly = function(assemblyName) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *     switch(assemblyName) {\n     *         case: 'JavaScriptCustomAssembly1':\n     *             // update runtime data\n     *             break;\n     *         // handle calls to other JS custom assemblies\n     *     }\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.callJsCustomAssembly(assemblyName);\n     * }\n     */\n    callJsCustomAssembly(assemblyName) {\n        const assemblyFunction = jsCAConfig.getJsCustomAssemblyFunction(assemblyName);\n        if (!_.isFunction(assemblyFunction)) {\n            throw new Error(\n                `JS custom assembly ${assemblyName} expected to be a function, but got ${typeof assemblyFunction}.`\n            );\n        }\n\n        return assemblyFunction.apply(this);\n    }\n\n    /**\n     * Specific iGo method which is invoked whenever Runtime makes a call to server procedure.\n     * @since v0.73.*\n     * @param {String} procedureName - name of server procedure to call\n     * @returns {Promise} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.callServerProcedure (superclass.callServerProcedure returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined.\n     * @example\n     * ExtensionClass.prototype.callServerProcedure = function(procedureName) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *     switch(procedureName) {\n     *         case: 'Procedure1':\n     *             // update runtime data\n     *             break;\n     *         // handle calls to other procedures\n     *     }\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.callServerProcedure(procedureName);\n     * }\n     */\n    callServerProcedure(procedureName) {\n        // convert data to iGo format using provided data adapter\n        const transformedClientData = prepareDataToSave();\n\n        return this.coreApi.serviceRequestProvider\n            .callServerProcedure(procedureName, transformedClientData)\n            .then(savedData => {\n                handleLoadedData.bind(this)(savedData);\n            });\n    }\n\n    /**\n     * Specific iGo method to apply e-signature\n     * @since v0.73.*\n     * @returns {Promise<Object>} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.applyEsign (superclass.applyEsign returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined.\n     * @example\n     * ExtensionClass.prototype.applyEsign = function() {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ... your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.applyEsign();\n     * }\n     */\n    applyEsign() {\n        // convert data to iGo format using provided data adapter\n        const transformedClientData = prepareDataToSave();\n\n        return this.coreApi.serviceRequestProvider\n            .applyEsign(transformedClientData)\n            .then(savedData => {\n                handleLoadedData.bind(this)(savedData);\n            });\n    }\n\n    /**\n     * Specific iGo method to decline e-signature\n     * @since v0.73.*\n     * @returns {Promise<Object>} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.declineEsign (superclass.declineEsign returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined.\n     * @example\n     * ExtensionClass.prototype.declineEsign = function() {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ... your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.declineEsign();\n     * }\n     */\n    declineEsign() {\n        // convert data to iGo format using provided data adapter\n        const transformedClientData = prepareDataToSave();\n\n        return this.coreApi.serviceRequestProvider\n            .declineEsign(transformedClientData)\n            .then(savedData => {\n                handleLoadedData.bind(this)(savedData);\n            });\n    }\n\n    /**\n     * Specific iGo method to activate form package\n     * @since v0.73.*\n     * @returns {Promise<Object>} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.activateFormPackage (superclass.activateFormPackage returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined.\n     * @example\n     * ExtensionClass.prototype.activateFormPackage = function(name) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ... your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.activateFormPackage(name);\n     * }\n     */\n    activateFormPackage(name) {\n        const shouldUpdateOnClient = RuntimeFeatureDetector.isBooleanFeatureOn(\n            RUNTIME_FEATURE_ACTIVATE_FORMS_PACKAGE_NO_REQUEST\n        );\n\n        if (shouldUpdateOnClient) {\n            const clientDataKey = this.coreApi.runtimeStateItems.CLIENT_DATA;\n            const packageXml = `<pkgs><p n=\"${name}\" /></pkgs>`;\n\n            this.coreApi.updateRuntimeState({\n                [clientDataKey]: {\n                    [LAST_PACKAGE_NAME]: { value: name, formattedValue: name },\n                    [PACKAGE_XML]: { value: packageXml, formattedValue: packageXml }\n                }\n            });\n\n            return;\n        }\n\n        // convert data to iGo format using provided data adapter\n        const transformedClientData = prepareDataToSave();\n\n        return this.coreApi.serviceRequestProvider\n            .activateFormPackage(name, transformedClientData)\n            .then(savedData => {\n                handleLoadedData.bind(this)(savedData);\n            });\n    }\n\n    /**\n     * Specific iGo method to prepare data before showing pdf\n     * @since v0.73.*\n     * @returns {Promise<Object>} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.viewPDF (superclass.viewPDF returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined.\n     * @example\n     * ExtensionClass.prototype.viewPDF = function() {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ... your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.viewPDF();\n     * }\n     */\n    async viewPDF() {\n        const serviceRequestProvider = this.coreApi.serviceRequestProvider;\n\n        const updateRuntimeWithSavedData = savedData => handleLoadedData.bind(this)(savedData);\n\n        const makeViewPDFModalWindow = pdfUrl =>\n            _.partial(ViewPDFModalWindow, pdfUrl, this.coreApi.hideModal);\n        const showViewPDFModalWindow = pdfUrl =>\n            this.coreApi.showModal(makeViewPDFModalWindow(pdfUrl));\n\n        // Remove isViewPdfFeatureOn when VIEW_PDF stop being a feature and become standart\n        const isViewPdfFeatureOn = RuntimeFeatureDetector.isBooleanFeatureOn(\n            RUNTIME_FEATURE_VIEW_PDF\n        );\n\n        const assemblyName = this.coreApi.getStringProductPropertyByName(CA_FOR_VIEW_PDF);\n        let shouldCallPredefinedCA = !_.isEmpty(assemblyName);\n\n        if (shouldCallPredefinedCA && jsCAConfig.isJSCAFunctionExists(assemblyName)) {\n            jsCAConfig.runJSCAFunction(assemblyName, this);\n            shouldCallPredefinedCA = false;\n        }\n\n        if (shouldCallPredefinedCA) {\n            await getCallCustomAssemblyFunction(false).bind(this)(assemblyName);\n        }\n\n        // convert data to iGo format using provided data adapter\n        const transformedClientData = prepareDataToSave();\n        const clientData = await serviceRequestProvider.exportFormFromIGO(transformedClientData);\n        updateRuntimeWithSavedData(clientData);\n\n        if (isViewPdfFeatureOn) {\n            const pdfUrl = await serviceRequestProvider.getPdfUrl();\n            showViewPDFModalWindow(pdfUrl);\n        }\n    }\n\n    /**\n     * This method is @deprecated and will be removed in nearest time. Use viewPDF() instead.\n     */\n    exportFormFromIGO() {}\n\n    /**\n     * This method is invoked whenever Runtime attempts to retrieve data for a SourceGrid. The default implementation tries to execute javascript custom assembly first and if it's missing sends request to the server.\n     * @since v0.56.*\n     * @param {String} assemblyName - name of custom assembly which returns Source Grid data, could be either JS or Server side custom assembly\n     * @returns {String|Promise} - stringified JSON Array or Promise of such Array which contains data for Source Grid. You must return a Promise if implementation contains any asynchronous operations and/or call to superclass.getSourceGridData (superclass.getSourceGridData returns a Promise that resolves to requested data). If implementation is synchronous you may return either Promise resolved to stringified JSON Array or just stringified JSON Array with data.\n     * @property {Object} JSON_Array[] - data object specifying data for single Source Grid row\n     * @property {String} JSON_Array[].row-id - unique row id\n     * @property {String} JSON_Array[].<column_name> - value for specified <column_name> in current row\n     * @example\n     * ExtensionClass.prototype.getSourceGridData = function(assemblyName) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ... your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.getSourceGridData(assemblyName);\n     *     // returned data example: '[{\\\"row-id\\\": \\\"1\\\",\\\"Name\\\": \\\"John\\\",\\\"DOB\\\": \\\"2016-10-10T00:00:00+00:00\\\"},{\\\"row-id\\\": \\\"2\\\",\\\"Name\\\": \\\"Bob\\\",\\\"DOB\\\": \\\"2010-02-13T00:00:00+00:00\\\"}]'\n     * }\n     */\n    getSourceGridData(assemblyName) {\n        const assemblyFunction = jsCAConfig.getJsCustomAssemblyFunction(assemblyName);\n        if (_.isFunction(assemblyFunction)) {\n            return assemblyFunction.apply(this);\n        }\n\n        return getCallCustomAssemblyFunction(false)\n            .bind(this)(assemblyName)\n            .then(data => {\n                // return custom assembly response\n                if (data && data.response) {\n                    return data.response;\n                }\n            });\n    }\n\n    /**\n     * This method is invoked each time when Runtime attempts to retrieve data for a SourceDropdown. The default implementation tries to execute javascript custom assembly first.If it's missing it sends request to the server.\n     * NOTE: its implementation should call services in background (don't use load progress indicator)\n     * to avoid source dropdown list being closed after the data is loaded.\n     * @since v0.56.*\n     * @param {String} assemblyName - name of custom assembly which returns Source Dropdown data, could be either JS or Server side custom assembly\n     * @returns {String|Promise} - stringified JSON Object or a Promise of such object which contains data for Source Dropdown. You must return a Promise if implementation contains any asynchronous operations and/or call to superclass.getSourceDropdownData (superclass.getSourceDropdownData returns a Promise that resolves to requested data). If implementation is synchronous you may return either Promise resolved to stringified JSON Object or just stringified JSON Object with data.\n     * @property {Object[]} JSON_Object.records[] - array of records, each representing single data item for Source Dropdown\n     * @property {String} JSON_Object.records[].name - Required. Item name (will be displayed in dropdown control)\n     * @property {String} JSON_Object.records[].value - Required. Item value (internal data value)\n     * @property {*} JSON_Object.records[].* - Optional. Any other supplementary data for a record\n     * @example\n     * ExtensionClass.prototype.getSourceDropdownData = function(assemblyName) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ... your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.getSourceDropdownData(assemblyName);\n     *     // returned data example: '{\"records\": [{\"name\": \"Belarus\",\"value\": \"Minsk\",\"option1\": \"qwe\",\"option2\": \"asd\"},{\"name\": \"USA\",\"value\": \"Washington\",\"option1\": \"zxc\",\"option2\": \"rty\"}]}'\n     * }\n     */\n    getSourceDropdownData(assemblyName) {\n        const assemblyFunction = jsCAConfig.getJsCustomAssemblyFunction(assemblyName);\n        if (_.isFunction(assemblyFunction)) {\n            return assemblyFunction.apply(this);\n        }\n\n        return getCallCustomAssemblyFunction(true)\n            .bind(this)(assemblyName)\n            .then(data => {\n                // return custom assembly response\n                if (data && data.response) {\n                    return data.response;\n                }\n            });\n    }\n\n    /**\n     * Invoked to validate credit card data via specific services.\n     * @since v0.65.*\n     * @param  {Object} creditCardData - filled in credit card data. Also contains extra parameters from client data. See `Credit card control data` at https://kb.epam.com/display/IPLNSCRD/iGo+%3C%3D%3E+SD+data+interchange+format\n     * @param  {String} creditCardControlName\n     * @param  {String} cardType - Visa, AmEx, MasterCard, etc...\n     * @param  {Object} ftniRequestOptions - Request options to be sent to FTNI service (defaultStatus, doNotUpdateCustomer, doNotUseCustomerName, doNotUseCustomerAddress)\n     * @returns {Promise<Object>} - Promise of the validateCreditCard operation completion. Resolving data format is the same as for @{creditCardData} param\n     * @example\n     * ExtensionClass.prototype.validateCreditCard = function(creditCardData, creditCardControlName, cardType) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ... your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.validateCreditCard(creditCardData, creditCardControlName, cardType);\n     * }\n     */\n\n    validateCreditCard(creditCardData, creditCardControlName, cardType, ftniRequestOptions) {\n        // add extra fields from client data (as per NGSD-4569)\n        const clientData = this.coreApi.getRuntimeData(); // get full data here, not just dirty (validateCard service seems to need all required data sent in request)\n        const additionalData = _.pick(clientData, additionalFTNIFieldsNames);\n        const mergedCardData = _.assign({}, creditCardData, additionalData);\n\n        return this.coreApi.serviceRequestProvider.validateCreditCard(\n            mergedCardData,\n            creditCardControlName,\n            cardType,\n            ftniRequestOptions\n        );\n    }\n\n    /**\n     * This method is used to erase previously entered credit card data.\n     * @since v0.65.*\n     * @param  {String} creditCardControlName - name of credit card control to be erased\n     * @returns {Promise} - Promise of the changeCreditCard operation completion. No data need to be resolved\n     * @example\n     * ExtensionClass.prototype.changeCreditCard = function(creditCardControlName) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ... your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.changeCreditCard(creditCardControlName);\n     * }\n     */\n    changeCreditCard(creditCardControlName) {\n        return this.coreApi.serviceRequestProvider\n            .changeCreditCard(creditCardControlName)\n            .then(data => !!data);\n    }\n\n    /**\n     * This method is invoked whenever email control makes a call to validate email.\n     * @since v0.67.*\n     * @param {String} email - email to validate\n     * @param {String} verificationService - verification service provider. One of ['kickbox']\n     * @returns {Promise<Object>} - Promise of operation completion which should resolve an object\n     * @property {String} Object.status - Required. Status of validation operation. One of ['valid', 'invalid', 'error', 'unverified']\n     * @property {String} [Object.message] - Optional message about validation execution on service\n     * @example\n     * ExtensionClass.prototype.verifyEmail = function(email, verificationService) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ...your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.verifyEmail(email, verificationService);\n     * }\n     */\n    verifyEmail(email, verificationService) {\n        return this.coreApi.serviceRequestProvider.verifyEmail(email, verificationService);\n    }\n\n    createAISCase(controlName) {\n        return this.coreApi.serviceRequestProvider.createAISCase(controlName);\n    }\n\n    openAISCase(controlName) {\n        return this.coreApi.serviceRequestProvider.openAISCase(controlName);\n    }\n\n    underwriteAISCase(controlName, underwriteToken) {\n        return this.coreApi.serviceRequestProvider.underwriteAISCase(controlName, underwriteToken);\n    }\n\n    /**\n     * This method is invoked whenever Runtime attempts to receive Smarty Streets Address Predictions\n     * @since v0.91.*\n     * @param {String} value - according to this value address predictions will be suggested\n     * @returns {Array} - Smarty Streets address predictions\n     * Example of output data:\n     * [\n     *   {\n     *     name: '22 Antelope Rd, Seneca MO',\n     *     id: '22 Antelope Rd, Seneca MO',\n     *     data: {\n     *          street: '22 Antelope Rd',\n     *          city: 'Seneca',\n     *          state: 'MO'\n     *     }\n     *   },\n     *   {\n     *     name: '333 Avenue B, Coudersport PA',\n     *     id: '333 Avenue B, Coudersport PA',\n     *     data: {\n     *          street: '333 Avenue B',\n     *          city: 'Coudersport',\n     *          state: 'PA'\n     *     }\n     *   }\n     * ]\n     * @example\n     * ExtensionClass.prototype.getSmartyStreetsPredictions = function(value) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ...your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.getSmartyStreetsPredictions(value);\n     * }\n     */\n    async getSmartyStreetsPredictions(value) {\n        const predictions = await this.coreApi.serviceRequestProvider.getSmartyStreetsPredictions(\n            value\n        );\n        return this.coreApi.convertSmartyStreetsPredictions(predictions);\n    }\n\n    /**\n     * This method is invoked whenever Runtime attempts to receive Google Places Address Predictions\n     * @since v0.91.*\n     * @param {String} value - according to this value address predictions will be suggested\n     * @returns {Array} - Google Places address predictions\n     * Example of output data:\n     * [\n     *   {\n     *     name: '150 West 34th Street, New York, NY, USA',\n     *     id: '150 West 34th Street, New York, NY, USA',\n     *     data: {\n     *          placeId: 'ChIJ9SwqvK5ZwokRjbiilW_p2rs'\n     *     }\n     *   },\n     *   {\n     *     name: '1085-1087 Boylston Street, Boston, MA, USA',\n     *     id: '1085-1087 Boylston Street, Boston, MA, USA',\n     *     data: {\n     *          placeId: 'ChIJjcKMJBt644kRVXqk_329y6o'\n     *     }\n     *   }\n     * ]\n     * @example\n     * ExtensionClass.prototype.getGooglePlacesPredictions = function(value) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ...your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.getGooglePlacesPredictions(value);\n     * }\n     */\n    async getGooglePlacesPredictions(value) {\n        const predictions = await this.coreApi.serviceRequestProvider.getGooglePlacesPredictions(\n            value\n        );\n        return this.coreApi.convertGooglePlacesPredictions(predictions);\n    }\n\n    /**\n     * This method is invoked whenever Runtime attempts to receive Smarty Streets Address Details\n     * @since v0.91.*\n     * @param {String} value - according to this value address details will be received\n     * @returns {Object} - Smarty Streets address details\n     * @property {string} country - country\n     * @property {string} city - city\n     * @property {string} state - state\n     * @property {string} address - address\n     * @property {string} zip - zip code\n     * Example of output data:\n     * {\n     *    address: \"222 Vellenorth Rd\",\n     *    city: \"Blue Ridge\",\n     *    country: \"US\",\n     *    state: \"GA\",\n     *    zip: \"30513-2813\"\n     * }\n     * @example\n     * ExtensionClass.prototype.getSmartyStreetsDetails = function(value) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ...your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.getSmartyStreetsDetails(value);\n     * }\n     */\n    async getSmartyStreetsDetails(value) {\n        const addressDetails = await this.coreApi.serviceRequestProvider.getSmartyStreetsAddress(\n            value\n        );\n        return this.coreApi.parseSmartyStreetsAddress(addressDetails);\n    }\n\n    /**\n     * This method is invoked whenever Runtime attempts to receive Google Places Address Details\n     * @since v0.91.*\n     * @param {String} value - according to this value address details will be received\n     * @returns {Object} - Google Places address details\n     * @property {string} country - country\n     * @property {string} city - city\n     * @property {string} state - state\n     * @property {string} address - address\n     * @property {string} zip - zip code\n     * Example of output data:\n     * {\n     *    address: \"1085-1087 Boylston Street\",\n     *    city: \"Boston\",\n     *    country: \"USA\",\n     *    state: \"MA\",\n     *    zip: \"02215\"\n     * }\n     * @example\n     * ExtensionClass.prototype.getGooglePlacesDetails = function(value) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ...your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.getGooglePlacesDetails(value);\n     * }\n     */\n    async getGooglePlacesDetails(value) {\n        const addressDetails = await this.coreApi.serviceRequestProvider.getGooglePlacesPlace(\n            value\n        );\n        return this.coreApi.parseGooglePlacesAddress(addressDetails);\n    }\n\n    /**\n     * This method is invoked whenever Runtime attempts to save data.\n     * All runtime data is available via API.\n     * @since v0.56.*\n     * @returns {Promise} - Promise of the save operation completion if implementation contains any asynchronous operations and/or call to superclass.saveData (superclass.saveData returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined. Note that this action is not expected to provide any data to runtime upon return. If you need to modify runtime data inside this action handler, use coreApi.updateRuntimeData().\n     * @example\n     * ExtensionClass.prototype.saveData = function() {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *     var runtimeData = coreApi.getRuntimeData();\n     *\n     *     // ... perform your saving operations or whatever else\n     *\n     *     // return Promise of base method execution if you are extending the default implementation:\n     *     return superclass.saveData();\n     * }\n     */\n    saveData() {\n        // convert data to iGo format using provided data adapter\n        const dataToSave = prepareDataToSave();\n        // call save request\n        return this.coreApi.serviceRequestProvider.saveCasesRequest(dataToSave).then(savedData => {\n            handleLoadedData.bind(this)(savedData);\n        });\n    }\n\n    /**\n     * This method is invoked whenever Runtime attempts to initialize with external data. Data could be loaded either synchronously or asynchronously.\n     * To load data synchronously pass it as a parameter. To load data asynchronously call the method without any parameters\n     * @since v0.80.*\n     * @param {Object} data - data to be loaded into runtime\n     * @returns {Promise|undefined} - Promise of the load operation completion if implementation contains any asynchronous operations and/or call to superclass.loadData (superclass.loadData returns a Promise).\n     * If implementation is synchronous you may return either resolved Promise or undefined. Note that this action is not expected to provide any data to runtime upon return.\n     * If you need to modify runtime data inside this action handler, use coreApi.updateRuntimeData().\n     * @example\n     * ExtensionClass.prototype.initialLoadData = function() {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ... perform your runtime data initialization operations or whatever else\n     *\n     *     // return Promise of base method execution if you are extending the default implementation:\n     *     return superclass.initialLoadData();\n     * }\n     */\n    initialLoadData(data) {\n        if (!_.isUndefined(data)) {\n            return handleInitialLoadedData(data);\n        }\n    }\n\n    /**\n     * This method is invoked whenever Runtime attempts to load data. Data could be loaded either synchronously or asynchronously.\n     * To load data synchronously pass it as a parameter. To load data asynchronously call the method without any parameters\n     * @since v0.70.*\n     * @param {Object} data - data to be loaded into runtime\n     * @returns {Promise|undefined} - Promise of the load operation completion if implementation contains any asynchronous operations and/or call to superclass.loadData (superclass.loadData returns a Promise).\n     * If implementation is synchronous you may return either resolved Promise or undefined. Note that this action is not expected to provide any data to runtime upon return.\n     * If you need to modify runtime data inside this action handler, use coreApi.updateRuntimeData().\n     * @example\n     * ExtensionClass.prototype.loadData = function() {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ... perform your loading operations or whatever else\n     *\n     *     // return Promise of base method execution if you are extending the default implementation:\n     *     return superclass.loadData();\n     * }\n     */\n    loadData(data) {\n        if (!_.isUndefined(data)) {\n            return handleLoadedData(data);\n        }\n        const iGoTimestampData = getTimestampClientData();\n        return this.coreApi.serviceRequestProvider\n            .loadCasesRequest(iGoTimestampData)\n            .then(handleLoadedData);\n    }\n\n    /**\n     * Specific iGo method to trigger sending email to clickwrap users\n     * @since v0.73.*\n     * @returns {Promise<Object>} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.sendEmail (superclass.sendEmail returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined.\n     * @example\n     * ExtensionClass.prototype.sendEmail = function(roleId) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ... your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.sendEmail(roleId);\n     * }\n     */\n    sendEmail(roleId) {\n        // convert data to iGo format using provided data adapter\n        const transformedClientData = prepareDataToSave();\n        return this.coreApi.serviceRequestProvider\n            .sendEmail(roleId, transformedClientData)\n            .then(savedData => {\n                handleLoadedData.bind(this)(savedData);\n            });\n    }\n    /**\n     * This method is invoked whenever Runtime makes a call to receive url to scheduler for selected paramed service.\n     * @since v0.85.*\n     * @param  {string} controlName - name of paramed control;\n     * @param  {string} service - selected paramed service;\n     * @returns {Promise<Object>} - Promise of operation completion which should resolve to an object;\n     * @property {string} Object.url - Required. Url to scheduler service;\n     */\n    async retrieveParamedSchedulerUrl(controlName, service) {\n        await this.saveData(); // Should save clientData to the server before request url;\n\n        try {\n            const { url } = await this.coreApi.serviceRequestProvider.retrieveParamedSchedulerUrl(\n                controlName,\n                service\n            );\n\n            await this.loadData(); // clientData must be updated after url generation due to iGo save into it additional information e.g. tokens etc and iGo.\n\n            return { url };\n        } catch (e) {\n            await this.loadData(); // In case any exception we should reload data from iGo to get last state.\n\n            throw e;\n        }\n    }\n\n    /**\n     * This method is invoked whenever Runtime makes a call to check status of scheduling.\n     * @since v0.85.*\n     * @param  {string} controlName - name of paramed control;\n     * @returns {Promise<Object>} - Promise of operation completion which should resolve to an object;\n     * @property {boolean} Object.schedulingDone - Required. Boolean flag that inform about finishing scheduling;\n     */\n    async checkParamedSchedulerStatus(controlName) {\n        try {\n            return await this.coreApi.serviceRequestProvider.checkParamedSchedulerStatus(\n                controlName\n            );\n        } catch (e) {\n            await this.loadData(); // In case any exception we should reload data from iGo to get last state.\n\n            throw e;\n        }\n    }\n\n    /**\n     * This method is invoked whenever Runtime attempts to log something\n     * @since v0.73.*\n     * @returns {Promise<Object>} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.callLogger (superclass.callLogger returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined.\n     * @example\n     * ExtensionClass.prototype.callLogger = function(log) {\n     *     // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n     *     var coreApi = this.coreApi;\n     *     var superclass = this.superclass;\n     *\n     *     // ... your code here\n     *\n     *     // return result of base method execution if you are extending the default implementation:\n     *     return superclass.callLogger(log);\n     * }\n     */\n    callLogger(log) {\n        return this.coreApi.serviceRequestProvider.runtimeLoggerRequest(log);\n    }\n\n    /**\n     * This method is invoked whenever Runtime attempts to upload file\n     * @param defaultFileName\n     */\n    async uploadFile(defaultFileName) {\n        await this.saveData();\n\n        postMessageHelper.sendMessageToParent({\n            type: pom.UPLOAD_FILE,\n            data: { defaultFileName }\n        });\n    }\n\n    /**\n     * This method is invoked whenever Runtime attempts to show attachments\n     */\n    showAttachments() {\n        postMessageHelper.sendMessageToParent({\n            type: pom.SHOW_ATTACHMENT_LIST\n        });\n    }\n}\n",
    "static": true,
    "longname": "/var/lib/jenkins/workspace/Screen Designer/NGEN - Screen Designer/ngen_screen_designer-0.107.5/src/runtime/sdk/IGoSpecificGlobalEventHandlers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 18,
    "kind": "class",
    "name": "IGoSpecificGlobalEventHandlers",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js",
    "static": true,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/IGoSpecificGlobalEventHandlers.js",
    "importStyle": "{IGoSpecificGlobalEventHandlers}",
    "description": "iGo-specific base SDK class.",
    "lineNumber": 26,
    "interface": false
  },
  {
    "__docId__": 19,
    "kind": "member",
    "name": "coreApi",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#coreApi",
    "access": "public",
    "description": "Reference to SDK API functions.",
    "examples": [
      "ExtensionClass.prototype.saveData = function() {\n    const clientData = this.coreApi.getRuntimeData();\n    //...\n}"
    ],
    "lineNumber": 35,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "name": "superclass",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#superclass",
    "access": "public",
    "description": "Superclass definition to provide access to implementation of base methods from SDK.",
    "examples": [
      "ExtensionClass.prototype.callCustomAssembly = function(assemblyName) {\n    return this.superclass.callCustomAssembly(assemblyName);\n}"
    ],
    "lineNumber": 44,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "method",
    "name": "callCustomAssembly",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#callCustomAssembly",
    "access": "public",
    "description": "This method is invoked whenever Runtime makes a call to custom assembly (excluding custom assemblies for SourceGrid and SourceDropdown data retrieval).",
    "examples": [
      "ExtensionClass.prototype.callCustomAssembly = function(assemblyName) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n    switch(assemblyName) {\n        case: 'CustomAssembly1':\n            // update runtime data\n            break;\n        // handle calls to other custom assemblies\n    }\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.callCustomAssembly(assemblyName);\n}"
    ],
    "lineNumber": 66,
    "since": "v0.56.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.callCustomAssembly (superclass.callCustomAssembly returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "assemblyName",
        "description": "name of custom assembly to call"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.callCustomAssembly (superclass.callCustomAssembly returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
    }
  },
  {
    "__docId__": 22,
    "kind": "method",
    "name": "callJsCustomAssembly",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#callJsCustomAssembly",
    "access": "public",
    "description": "This method is invoked whenever Runtime makes a call to JavaScript custom assembly. Invocation occurs synchronously for Rule and Event action. It is allowed to return Promise and execute asynchronous code ONLY for Event action.",
    "examples": [
      "ExtensionClass.prototype.callJsCustomAssembly = function(assemblyName) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n    switch(assemblyName) {\n        case: 'JavaScriptCustomAssembly1':\n            // update runtime data\n            break;\n        // handle calls to other JS custom assemblies\n    }\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.callJsCustomAssembly(assemblyName);\n}"
    ],
    "lineNumber": 90,
    "since": "v0.77.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined|Promise} - If implementation is synchronous you may return either undefined or resolved Promise. Return Promise of operation completion if implementation contains any asynchronous operations only valid for Event action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "assemblyName",
        "description": "name of JavaScript custom assembly to call"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined",
        "Promise"
      ],
      "spread": false,
      "description": "If implementation is synchronous you may return either undefined or resolved Promise. Return Promise of operation completion if implementation contains any asynchronous operations only valid for Event action."
    }
  },
  {
    "__docId__": 23,
    "kind": "method",
    "name": "callServerProcedure",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#callServerProcedure",
    "access": "public",
    "description": "Specific iGo method which is invoked whenever Runtime makes a call to server procedure.",
    "examples": [
      "ExtensionClass.prototype.callServerProcedure = function(procedureName) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n    switch(procedureName) {\n        case: 'Procedure1':\n            // update runtime data\n            break;\n        // handle calls to other procedures\n    }\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.callServerProcedure(procedureName);\n}"
    ],
    "lineNumber": 121,
    "since": "v0.73.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.callServerProcedure (superclass.callServerProcedure returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "procedureName",
        "description": "name of server procedure to call"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.callServerProcedure (superclass.callServerProcedure returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
    }
  },
  {
    "__docId__": 24,
    "kind": "method",
    "name": "applyEsign",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#applyEsign",
    "access": "public",
    "description": "Specific iGo method to apply e-signature",
    "examples": [
      "ExtensionClass.prototype.applyEsign = function() {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ... your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.applyEsign();\n}"
    ],
    "lineNumber": 148,
    "since": "v0.73.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.applyEsign (superclass.applyEsign returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.applyEsign (superclass.applyEsign returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
    },
    "params": []
  },
  {
    "__docId__": 25,
    "kind": "method",
    "name": "declineEsign",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#declineEsign",
    "access": "public",
    "description": "Specific iGo method to decline e-signature",
    "examples": [
      "ExtensionClass.prototype.declineEsign = function() {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ... your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.declineEsign();\n}"
    ],
    "lineNumber": 175,
    "since": "v0.73.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.declineEsign (superclass.declineEsign returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.declineEsign (superclass.declineEsign returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
    },
    "params": []
  },
  {
    "__docId__": 26,
    "kind": "method",
    "name": "activateFormPackage",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#activateFormPackage",
    "access": "public",
    "description": "Specific iGo method to activate form package",
    "examples": [
      "ExtensionClass.prototype.activateFormPackage = function(name) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ... your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.activateFormPackage(name);\n}"
    ],
    "lineNumber": 202,
    "since": "v0.73.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.activateFormPackage (superclass.activateFormPackage returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.activateFormPackage (superclass.activateFormPackage returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
    },
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 27,
    "kind": "method",
    "name": "viewPDF",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#viewPDF",
    "access": "public",
    "description": "Specific iGo method to prepare data before showing pdf",
    "examples": [
      "ExtensionClass.prototype.viewPDF = function() {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ... your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.viewPDF();\n}"
    ],
    "lineNumber": 247,
    "since": "v0.73.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.viewPDF (superclass.viewPDF returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.viewPDF (superclass.viewPDF returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
    },
    "params": []
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "exportFormFromIGO",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#exportFormFromIGO",
    "access": "public",
    "description": "This method is @deprecated and will be removed in nearest time. Use viewPDF() instead.",
    "lineNumber": 288,
    "params": [],
    "return": null
  },
  {
    "__docId__": 29,
    "kind": "method",
    "name": "getSourceGridData",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#getSourceGridData",
    "access": "public",
    "description": "This method is invoked whenever Runtime attempts to retrieve data for a SourceGrid. The default implementation tries to execute javascript custom assembly first and if it's missing sends request to the server.",
    "examples": [
      "ExtensionClass.prototype.getSourceGridData = function(assemblyName) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ... your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.getSourceGridData(assemblyName);\n    // returned data example: '[{\\\"row-id\\\": \\\"1\\\",\\\"Name\\\": \\\"John\\\",\\\"DOB\\\": \\\"2016-10-10T00:00:00+00:00\\\"},{\\\"row-id\\\": \\\"2\\\",\\\"Name\\\": \\\"Bob\\\",\\\"DOB\\\": \\\"2010-02-13T00:00:00+00:00\\\"}]'\n}"
    ],
    "lineNumber": 311,
    "since": "v0.56.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String|Promise} - stringified JSON Array or Promise of such Array which contains data for Source Grid. You must return a Promise if implementation contains any asynchronous operations and/or call to superclass.getSourceGridData (superclass.getSourceGridData returns a Promise that resolves to requested data). If implementation is synchronous you may return either Promise resolved to stringified JSON Array or just stringified JSON Array with data."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "assemblyName",
        "description": "name of custom assembly which returns Source Grid data, could be either JS or Server side custom assembly"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "JSON_Array[]",
        "description": "data object specifying data for single Source Grid row"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "JSON_Array[].row-id",
        "description": "unique row id"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "JSON_Array[].<column_name>",
        "description": "value for specified <column_name> in current row"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String",
        "Promise"
      ],
      "spread": false,
      "description": "stringified JSON Array or Promise of such Array which contains data for Source Grid. You must return a Promise if implementation contains any asynchronous operations and/or call to superclass.getSourceGridData (superclass.getSourceGridData returns a Promise that resolves to requested data). If implementation is synchronous you may return either Promise resolved to stringified JSON Array or just stringified JSON Array with data."
    }
  },
  {
    "__docId__": 30,
    "kind": "method",
    "name": "getSourceDropdownData",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#getSourceDropdownData",
    "access": "public",
    "description": "This method is invoked each time when Runtime attempts to retrieve data for a SourceDropdown. The default implementation tries to execute javascript custom assembly first.If it's missing it sends request to the server.\nNOTE: its implementation should call services in background (don't use load progress indicator)\nto avoid source dropdown list being closed after the data is loaded.",
    "examples": [
      "ExtensionClass.prototype.getSourceDropdownData = function(assemblyName) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ... your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.getSourceDropdownData(assemblyName);\n    // returned data example: '{\"records\": [{\"name\": \"Belarus\",\"value\": \"Minsk\",\"option1\": \"qwe\",\"option2\": \"asd\"},{\"name\": \"USA\",\"value\": \"Washington\",\"option1\": \"zxc\",\"option2\": \"rty\"}]}'\n}"
    ],
    "lineNumber": 351,
    "since": "v0.56.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String|Promise} - stringified JSON Object or a Promise of such object which contains data for Source Dropdown. You must return a Promise if implementation contains any asynchronous operations and/or call to superclass.getSourceDropdownData (superclass.getSourceDropdownData returns a Promise that resolves to requested data). If implementation is synchronous you may return either Promise resolved to stringified JSON Object or just stringified JSON Object with data."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "assemblyName",
        "description": "name of custom assembly which returns Source Dropdown data, could be either JS or Server side custom assembly"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "JSON_Object.records[]",
        "description": "array of records, each representing single data item for Source Dropdown"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "JSON_Object.records[].name",
        "description": "Required. Item name (will be displayed in dropdown control)"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "JSON_Object.records[].value",
        "description": "Required. Item value (internal data value)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "JSON_Object.records[].*",
        "description": "Optional. Any other supplementary data for a record"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String",
        "Promise"
      ],
      "spread": false,
      "description": "stringified JSON Object or a Promise of such object which contains data for Source Dropdown. You must return a Promise if implementation contains any asynchronous operations and/or call to superclass.getSourceDropdownData (superclass.getSourceDropdownData returns a Promise that resolves to requested data). If implementation is synchronous you may return either Promise resolved to stringified JSON Object or just stringified JSON Object with data."
    }
  },
  {
    "__docId__": 31,
    "kind": "method",
    "name": "validateCreditCard",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#validateCreditCard",
    "access": "public",
    "description": "Invoked to validate credit card data via specific services.",
    "examples": [
      "ExtensionClass.prototype.validateCreditCard = function(creditCardData, creditCardControlName, cardType) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ... your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.validateCreditCard(creditCardData, creditCardControlName, cardType);\n}"
    ],
    "lineNumber": 388,
    "since": "v0.65.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - Promise of the validateCreditCard operation completion. Resolving data format is the same as for @{creditCardData} param"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "creditCardData",
        "description": "filled in credit card data. Also contains extra parameters from client data. See `Credit card control data` at https://kb.epam.com/display/IPLNSCRD/iGo+%3C%3D%3E+SD+data+interchange+format"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "creditCardControlName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "cardType",
        "description": "Visa, AmEx, MasterCard, etc..."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ftniRequestOptions",
        "description": "Request options to be sent to FTNI service (defaultStatus, doNotUpdateCustomer, doNotUseCustomerName, doNotUseCustomerAddress)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Promise of the validateCreditCard operation completion. Resolving data format is the same as for @{creditCardData} param"
    }
  },
  {
    "__docId__": 32,
    "kind": "method",
    "name": "changeCreditCard",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#changeCreditCard",
    "access": "public",
    "description": "This method is used to erase previously entered credit card data.",
    "examples": [
      "ExtensionClass.prototype.changeCreditCard = function(creditCardControlName) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ... your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.changeCreditCard(creditCardControlName);\n}"
    ],
    "lineNumber": 419,
    "since": "v0.65.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Promise of the changeCreditCard operation completion. No data need to be resolved"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "creditCardControlName",
        "description": "name of credit card control to be erased"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Promise of the changeCreditCard operation completion. No data need to be resolved"
    }
  },
  {
    "__docId__": 33,
    "kind": "method",
    "name": "verifyEmail",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#verifyEmail",
    "access": "public",
    "description": "This method is invoked whenever email control makes a call to validate email.",
    "examples": [
      "ExtensionClass.prototype.verifyEmail = function(email, verificationService) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ...your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.verifyEmail(email, verificationService);\n}"
    ],
    "lineNumber": 445,
    "since": "v0.67.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - Promise of operation completion which should resolve an object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": "email to validate"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "verificationService",
        "description": "verification service provider. One of ['kickbox']"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "Object.status",
        "description": "Required. Status of validation operation. One of ['valid', 'invalid', 'error', 'unverified']"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "Object.message",
        "description": "Optional message about validation execution on service"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Promise of operation completion which should resolve an object"
    }
  },
  {
    "__docId__": 34,
    "kind": "method",
    "name": "createAISCase",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#createAISCase",
    "access": "public",
    "description": null,
    "lineNumber": 449,
    "undocument": true,
    "params": [
      {
        "name": "controlName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "method",
    "name": "openAISCase",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#openAISCase",
    "access": "public",
    "description": null,
    "lineNumber": 453,
    "undocument": true,
    "params": [
      {
        "name": "controlName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 36,
    "kind": "method",
    "name": "underwriteAISCase",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#underwriteAISCase",
    "access": "public",
    "description": null,
    "lineNumber": 457,
    "undocument": true,
    "params": [
      {
        "name": "controlName",
        "types": [
          "*"
        ]
      },
      {
        "name": "underwriteToken",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "getSmartyStreetsPredictions",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#getSmartyStreetsPredictions",
    "access": "public",
    "description": "This method is invoked whenever Runtime attempts to receive Smarty Streets Address Predictions",
    "examples": [
      "ExtensionClass.prototype.getSmartyStreetsPredictions = function(value) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ...your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.getSmartyStreetsPredictions(value);\n}"
    ],
    "lineNumber": 499,
    "since": "v0.91.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - Smarty Streets address predictions\nExample of output data:\n[\n  {\n    name: '22 Antelope Rd, Seneca MO',\n    id: '22 Antelope Rd, Seneca MO',\n    data: {\n         street: '22 Antelope Rd',\n         city: 'Seneca',\n         state: 'MO'\n    }\n  },\n  {\n    name: '333 Avenue B, Coudersport PA',\n    id: '333 Avenue B, Coudersport PA',\n    data: {\n         street: '333 Avenue B',\n         city: 'Coudersport',\n         state: 'PA'\n    }\n  }\n]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "according to this value address predictions will be suggested"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Smarty Streets address predictions\nExample of output data:\n[\n  {\n    name: '22 Antelope Rd, Seneca MO',\n    id: '22 Antelope Rd, Seneca MO',\n    data: {\n         street: '22 Antelope Rd',\n         city: 'Seneca',\n         state: 'MO'\n    }\n  },\n  {\n    name: '333 Avenue B, Coudersport PA',\n    id: '333 Avenue B, Coudersport PA',\n    data: {\n         street: '333 Avenue B',\n         city: 'Coudersport',\n         state: 'PA'\n    }\n  }\n]"
    }
  },
  {
    "__docId__": 38,
    "kind": "method",
    "name": "getGooglePlacesPredictions",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#getGooglePlacesPredictions",
    "access": "public",
    "description": "This method is invoked whenever Runtime attempts to receive Google Places Address Predictions",
    "examples": [
      "ExtensionClass.prototype.getGooglePlacesPredictions = function(value) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ...your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.getGooglePlacesPredictions(value);\n}"
    ],
    "lineNumber": 540,
    "since": "v0.91.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - Google Places address predictions\nExample of output data:\n[\n  {\n    name: '150 West 34th Street, New York, NY, USA',\n    id: '150 West 34th Street, New York, NY, USA',\n    data: {\n         placeId: 'ChIJ9SwqvK5ZwokRjbiilW_p2rs'\n    }\n  },\n  {\n    name: '1085-1087 Boylston Street, Boston, MA, USA',\n    id: '1085-1087 Boylston Street, Boston, MA, USA',\n    data: {\n         placeId: 'ChIJjcKMJBt644kRVXqk_329y6o'\n    }\n  }\n]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "according to this value address predictions will be suggested"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Google Places address predictions\nExample of output data:\n[\n  {\n    name: '150 West 34th Street, New York, NY, USA',\n    id: '150 West 34th Street, New York, NY, USA',\n    data: {\n         placeId: 'ChIJ9SwqvK5ZwokRjbiilW_p2rs'\n    }\n  },\n  {\n    name: '1085-1087 Boylston Street, Boston, MA, USA',\n    id: '1085-1087 Boylston Street, Boston, MA, USA',\n    data: {\n         placeId: 'ChIJjcKMJBt644kRVXqk_329y6o'\n    }\n  }\n]"
    }
  },
  {
    "__docId__": 39,
    "kind": "method",
    "name": "getSmartyStreetsDetails",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#getSmartyStreetsDetails",
    "access": "public",
    "description": "This method is invoked whenever Runtime attempts to receive Smarty Streets Address Details",
    "examples": [
      "ExtensionClass.prototype.getSmartyStreetsDetails = function(value) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ...your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.getSmartyStreetsDetails(value);\n}"
    ],
    "lineNumber": 577,
    "since": "v0.91.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Smarty Streets address details"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "according to this value address details will be received"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "country",
        "description": "country"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "city",
        "description": "city"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "state"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "address"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "zip",
        "description": "zip code\nExample of output data:\n{\n   address: \"222 Vellenorth Rd\",\n   city: \"Blue Ridge\",\n   country: \"US\",\n   state: \"GA\",\n   zip: \"30513-2813\"\n}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Smarty Streets address details"
    }
  },
  {
    "__docId__": 40,
    "kind": "method",
    "name": "getGooglePlacesDetails",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#getGooglePlacesDetails",
    "access": "public",
    "description": "This method is invoked whenever Runtime attempts to receive Google Places Address Details",
    "examples": [
      "ExtensionClass.prototype.getGooglePlacesDetails = function(value) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ...your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.getGooglePlacesDetails(value);\n}"
    ],
    "lineNumber": 614,
    "since": "v0.91.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - Google Places address details"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "according to this value address details will be received"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "country",
        "description": "country"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "city",
        "description": "city"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "state"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "address"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "zip",
        "description": "zip code\nExample of output data:\n{\n   address: \"1085-1087 Boylston Street\",\n   city: \"Boston\",\n   country: \"USA\",\n   state: \"MA\",\n   zip: \"02215\"\n}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Google Places address details"
    }
  },
  {
    "__docId__": 41,
    "kind": "method",
    "name": "saveData",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#saveData",
    "access": "public",
    "description": "This method is invoked whenever Runtime attempts to save data.\nAll runtime data is available via API.",
    "examples": [
      "ExtensionClass.prototype.saveData = function() {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n    var runtimeData = coreApi.getRuntimeData();\n\n    // ... perform your saving operations or whatever else\n\n    // return Promise of base method execution if you are extending the default implementation:\n    return superclass.saveData();\n}"
    ],
    "lineNumber": 639,
    "since": "v0.56.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Promise of the save operation completion if implementation contains any asynchronous operations and/or call to superclass.saveData (superclass.saveData returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined. Note that this action is not expected to provide any data to runtime upon return. If you need to modify runtime data inside this action handler, use coreApi.updateRuntimeData()."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Promise of the save operation completion if implementation contains any asynchronous operations and/or call to superclass.saveData (superclass.saveData returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined. Note that this action is not expected to provide any data to runtime upon return. If you need to modify runtime data inside this action handler, use coreApi.updateRuntimeData()."
    },
    "params": []
  },
  {
    "__docId__": 42,
    "kind": "method",
    "name": "initialLoadData",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#initialLoadData",
    "access": "public",
    "description": "This method is invoked whenever Runtime attempts to initialize with external data. Data could be loaded either synchronously or asynchronously.\nTo load data synchronously pass it as a parameter. To load data asynchronously call the method without any parameters",
    "examples": [
      "ExtensionClass.prototype.initialLoadData = function() {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ... perform your runtime data initialization operations or whatever else\n\n    // return Promise of base method execution if you are extending the default implementation:\n    return superclass.initialLoadData();\n}"
    ],
    "lineNumber": 668,
    "since": "v0.80.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise|undefined} - Promise of the load operation completion if implementation contains any asynchronous operations and/or call to superclass.loadData (superclass.loadData returns a Promise).\nIf implementation is synchronous you may return either resolved Promise or undefined. Note that this action is not expected to provide any data to runtime upon return.\nIf you need to modify runtime data inside this action handler, use coreApi.updateRuntimeData()."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data to be loaded into runtime"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise",
        "undefined"
      ],
      "spread": false,
      "description": "Promise of the load operation completion if implementation contains any asynchronous operations and/or call to superclass.loadData (superclass.loadData returns a Promise).\nIf implementation is synchronous you may return either resolved Promise or undefined. Note that this action is not expected to provide any data to runtime upon return.\nIf you need to modify runtime data inside this action handler, use coreApi.updateRuntimeData()."
    }
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "loadData",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#loadData",
    "access": "public",
    "description": "This method is invoked whenever Runtime attempts to load data. Data could be loaded either synchronously or asynchronously.\nTo load data synchronously pass it as a parameter. To load data asynchronously call the method without any parameters",
    "examples": [
      "ExtensionClass.prototype.loadData = function() {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ... perform your loading operations or whatever else\n\n    // return Promise of base method execution if you are extending the default implementation:\n    return superclass.loadData();\n}"
    ],
    "lineNumber": 694,
    "since": "v0.70.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise|undefined} - Promise of the load operation completion if implementation contains any asynchronous operations and/or call to superclass.loadData (superclass.loadData returns a Promise).\nIf implementation is synchronous you may return either resolved Promise or undefined. Note that this action is not expected to provide any data to runtime upon return.\nIf you need to modify runtime data inside this action handler, use coreApi.updateRuntimeData()."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data to be loaded into runtime"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise",
        "undefined"
      ],
      "spread": false,
      "description": "Promise of the load operation completion if implementation contains any asynchronous operations and/or call to superclass.loadData (superclass.loadData returns a Promise).\nIf implementation is synchronous you may return either resolved Promise or undefined. Note that this action is not expected to provide any data to runtime upon return.\nIf you need to modify runtime data inside this action handler, use coreApi.updateRuntimeData()."
    }
  },
  {
    "__docId__": 44,
    "kind": "method",
    "name": "sendEmail",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#sendEmail",
    "access": "public",
    "description": "Specific iGo method to trigger sending email to clickwrap users",
    "examples": [
      "ExtensionClass.prototype.sendEmail = function(roleId) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ... your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.sendEmail(roleId);\n}"
    ],
    "lineNumber": 720,
    "since": "v0.73.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.sendEmail (superclass.sendEmail returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.sendEmail (superclass.sendEmail returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
    },
    "params": [
      {
        "name": "roleId",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "retrieveParamedSchedulerUrl",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#retrieveParamedSchedulerUrl",
    "access": "public",
    "description": "This method is invoked whenever Runtime makes a call to receive url to scheduler for selected paramed service.",
    "lineNumber": 737,
    "since": "v0.85.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - Promise of operation completion which should resolve to an object;"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "controlName",
        "description": "name of paramed control;"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "service",
        "description": "selected paramed service;"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "Object.url",
        "description": "Required. Url to scheduler service;"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Promise of operation completion which should resolve to an object;"
    }
  },
  {
    "__docId__": 46,
    "kind": "method",
    "name": "checkParamedSchedulerStatus",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#checkParamedSchedulerStatus",
    "access": "public",
    "description": "This method is invoked whenever Runtime makes a call to check status of scheduling.",
    "lineNumber": 763,
    "since": "v0.85.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - Promise of operation completion which should resolve to an object;"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "controlName",
        "description": "name of paramed control;"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "Object.schedulingDone",
        "description": "Required. Boolean flag that inform about finishing scheduling;"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "Promise of operation completion which should resolve to an object;"
    }
  },
  {
    "__docId__": 47,
    "kind": "method",
    "name": "callLogger",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#callLogger",
    "access": "public",
    "description": "This method is invoked whenever Runtime attempts to log something",
    "examples": [
      "ExtensionClass.prototype.callLogger = function(log) {\n    // consider saving references to coreApi and superclass to avoid using \"this\" in nested functions:\n    var coreApi = this.coreApi;\n    var superclass = this.superclass;\n\n    // ... your code here\n\n    // return result of base method execution if you are extending the default implementation:\n    return superclass.callLogger(log);\n}"
    ],
    "lineNumber": 791,
    "since": "v0.73.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Object>} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.callLogger (superclass.callLogger returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object>"
      ],
      "spread": false,
      "description": "A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.callLogger (superclass.callLogger returns a Promise). If implementation is synchronous you may return either resolved Promise or undefined."
    },
    "params": [
      {
        "name": "log",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 48,
    "kind": "method",
    "name": "uploadFile",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#uploadFile",
    "access": "public",
    "description": "This method is invoked whenever Runtime attempts to upload file",
    "lineNumber": 799,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultFileName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 49,
    "kind": "method",
    "name": "showAttachments",
    "memberof": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/IGoSpecificGlobalEventHandlers.js~IGoSpecificGlobalEventHandlers#showAttachments",
    "access": "public",
    "description": "This method is invoked whenever Runtime attempts to show attachments",
    "lineNumber": 811,
    "params": [],
    "return": null
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "sdk/RuntimeCoreAPI.js",
    "content": "import _ from 'lodash';\nimport React from 'react';\nimport { Modal } from 'react-bootstrap';\nimport logger from 'runtime/../../logger';\nimport RuntimeStore from 'runtime/stores/RuntimeStore/RuntimeStore';\nimport RuntimeProductPropertiesStore from 'runtime/stores/RuntimeProductPropertiesStore';\nimport RuntimeActions from 'runtime/actions/RuntimeActionCreators';\nimport { show, hide } from 'utils/loader';\nimport {\n    convertSmartyStreetsPredictionsToOptions,\n    convertGooglePlacesPredictionsToOptions\n} from 'utils/addressUtils/convertPredictionsToOptions';\nimport parseSmartyStreetsAddress from 'utils/addressUtils/parseSmartyStreetsAddress';\nimport parseGooglePlacesAddress from 'utils/addressUtils/parseGooglePlacesAddress';\nimport DirtyDataAdapter from 'runtime/utils/DataAdapter/DirtyData/CaseAdapter';\nimport FullDataAdapter from 'runtime/utils/DataAdapter/FullData/CaseAdapter';\nimport serviceRequestProvider from 'runtime/utils/serviceRequests';\nimport * as runtimeStateItems from 'runtime/constants/RuntimeStateItemNames';\nimport * as sdkEventHandlerNames from 'runtime/sdk/SDKEventHandlerNames';\nimport { getAPIMethod } from 'runtime/utils/apiConfig';\nimport buildNestedAppIndex from 'runtime/nested/utils/buildNestedAppIndex';\nimport buildAssetPathToNestedVersion from 'runtime/nested/utils/buildAssetPathToNestedVersion';\nimport { ATTACHMENT_ID_PREFIX } from 'runtime/constants/ClientDataFieldNames';\nimport UploadFileModal from 'runtime/sdk/components/UploadFileModal/UploadFileModal.react';\nimport ShowAttachmentsModal from 'runtime/sdk/components/UploadFileModal/ShowAttachmentsModal.react';\nimport EventManager from 'runtime/engine/events/EventManager';\nimport {\n    SCREEN_HAS_BEEN_SWITCHED,\n    OPEN_SCREEN,\n    SCREEN_IS_GOING_TO_BE_SWITCHED\n} from 'shared/constants/EventNames';\nimport gotoScreen from 'runtime/engine/events/actionComponents/other_screen';\nimport gotoFirstIncompleteScreen from 'runtime/engine/events/actionComponents/first_incomplete_screen';\n\n/**\n * SDK API class.\n * Provides implementations to use in SDK\n */\n\nconst USE_DIRTY_DATA = true;\nconst USE_FULL_DATA = false;\nconst DEFAULT_API_LOADER_ID = 'runtimeApiLoader';\n\nfunction _externalDataProcessor(rawData, isDirty = false) {\n    const DataAdapter = isDirty ? DirtyDataAdapter : FullDataAdapter;\n    const {\n        caseData,\n        metaData,\n        eliminatedAndEmptyFields,\n        shouldReplaceSavedData\n    } = DataAdapter.transformLoadedData(rawData);\n    const hasAttachment = DataAdapter.hasAttachment(rawData);\n    return {\n        caseData,\n        metaData,\n        eliminatedAndEmptyFields,\n        shouldReplaceSavedData,\n        hasAttachment\n    };\n}\n\n/**\n * Runtime Core API\n */\nexport default class RuntimeCoreAPI {\n    /**\n     * Provides access to existing data adapters\n     * @property {Object} iGo - data adapter for iGo\n     * @property {Function} iGo.transformDataToSave - function to transform data from runtime to server format, to use before saving on server\n     * @property {Function} iGo.transformLoadedData - function to transform data loaded from server into runtime format, to adapt data loaded from server\n     * @property {Object} iGoDirtyData - dirty data adapter for iGo\n     * @property {Function} iGoDirtyData.transformDataToSave - function to transform dirty data from runtime to server format, to use before saving on server\n     * @property {Function} iGoDirtyData.transformLoadedData - function to transform dirty data loaded from server into runtime format, to adapt data loaded from server\n     * @example\n     * const clientData = this.api.getRuntimeData();\n     * const transformedClientData = this.api.clientDataAdapter.iGo.transformDataToSave(clientData);\n     */\n    clientDataAdapter = {\n        /**\n         * So far there's the only predefined data adapter to work with iGo\n         */\n        iGo: {\n            /**\n             * Transforms client data into format suitable for saving on server side\n             * @param {Object} data - form values data\n             * @return {Object} transformed data object for saving\n             */\n            transformDataToSave(data) {\n                return FullDataAdapter.transformDataToSave(data);\n            },\n            /**\n             * Transforms server-side data object into format suitable for updating runtime\n             * @param {Object} clientData - form values data\n             * @return {Object} transformed data object which can be directly fed into updateRuntimeData() api function\n             */\n            transformLoadedData: data => _externalDataProcessor(data, USE_FULL_DATA)\n        },\n        iGoDirtyData: {\n            /**\n             * Transforms client dirty data into format suitable for saving on server side\n             * @param {Object} dirtyData - dirty form values data\n             * @return {Object} transformed data object for saving\n             */\n            transformDataToSave(dirtyData) {\n                return DirtyDataAdapter.transformDataToSave(dirtyData);\n            },\n            /**\n             * Transforms server-side data object into format suitable for updating runtime\n             * @param {Object} clientData - form values data\n             * @return {Object} transformed data object which can be directly fed into updateRuntimeData() api function\n             */\n            transformLoadedData: data => _externalDataProcessor(data, USE_DIRTY_DATA)\n        }\n    };\n\n    /**\n     * Object that contains methods for making pre-configured external calls\n     * @example\n     * const result = this.coreApi.serviceRequestProvider.callService(assemblyName, transformedClientData, runtimeState, shouldCallInBackground)\n     */\n    serviceRequestProvider = serviceRequestProvider;\n\n    /** Definition of SDK event handlers' names. To be used when overriding implementations of SDK event handlers.\n     * @since v0.82.*\n     * @type {Object}\n     * @example\n     * var saveDataHandlerName = this.coreApi.sdkEventHandlerNames.SAVE_DATA;\n     */\n    sdkEventHandlerNames = sdkEventHandlerNames;\n\n    /**\n     * Cross-browser implementation of JS Promise. To use wherever SDK expects params of Promise type.\n     * @example\n     * return this.coreApi.Promise.resolve(data);\n     */\n    Promise = Promise;\n\n    /**\n     * Gets form values client data\n     * @deprecated Use getRuntimeState(runtimeStateItems.CLIENT_DATA) instead\n     * @return {Object} - data with field names as keys\n     * @example\n     * const clientData = this.coreApi.getRuntimeData();\n     * // returned data example:\n     * // clientData = {\n     * //   myDropdown: {\n     * //     value\": \"Washington\",\n     * //     formattedValue\": \"USA\",\n     * //   },\n     * //   someTextbox\": {\n     * //     value\": \"some text\",\n     * //     formattedValue: \"some text\"\n     * //   },\n     * //   cossFORMS_FORMS_LastHiddenScreens: {\n     * //     value: \"[\\\"Screen 1\\\"]\"\n     * //   }\n     * // }\n     */\n    getRuntimeData() {\n        return RuntimeStore.getPlainFormValues();\n    }\n\n    /**\n     * Gets \"dirty\" form values client data. The data is considered \"dirty\" if it was modified since last execution of \"resetDirtyData\" API method. Note: \"resetDirtyData\" is implicitly executed upon loading data from iGo in \"saveData\", \"callCustomAssembly\" and other similar methods.\n     * @return {Object} - data with field names as keys\n     * @since v0.83.*\n     * @example\n     * const clientData = this.coreApi.getRuntimeDirtyData();\n     * // returned data example:\n     * // clientData = {\n     * //   myDropdown: {\n     * //     value\": \"Washington\",\n     * //     formattedValue\": \"USA\",\n     * //   },\n     * //   someTextbox\": {\n     * //     value\": \"some text\",\n     * //     formattedValue: \"some text\"\n     * //   },\n     * //   cossFORMS_FORMS_LastHiddenScreens: {\n     * //     value: \"[\\\"Screen 1\\\"]\"\n     * //   }\n     * // }\n     */\n    getRuntimeDirtyData() {\n        const dirtyFormValues = RuntimeStore.getDirtyFormValues();\n        return _.isFunction(dirtyFormValues.toJS) ? dirtyFormValues.toJS() : dirtyFormValues;\n    }\n\n    /**\n     * Resets \"dirty\" state of client data. See description of \"getRuntimeDirtyData\" API method.\n     * @example\n     * this.coreApi.resetDirtyData();\n     */\n    resetDirtyData() {\n        RuntimeActions.resetDirtyDataNoEmit();\n    }\n\n    /**\n     * Updates runtime state\n     * @deprecated Use updateRuntimeState() instead\n     * @param {Object} data - runtime state data to set\n     * @param {Object[]|Object} data.caseData - form values data array or object\n     * @param {Object} data.metaData - metadata object\n     * @param {Boolean} data.shouldReplaceSavedData - set \"true\" if provided data should entirely replace existing runtime data, set \"false\" if only provided values should be replaced in existing runtime data\n     * @param {Boolean} data.hasAttachment - set \"true\" if Attachment controls should be displayed in Navigation panel\n     * @param {Immutable.Map[]} data.eliminatedAndEmptyFields - array of controls for which their default values need to be restored\n     * @example <caption>Legacy caseData format</caption>\n     * this.coreApi.updateRuntimeData({\n     *     caseData: [{\n     *         name: 'PI_FirstName',\n     *         value: 'Andrew',\n     *         formattedValue: 'Andrew',\n     *         isValid: 'true'\n     *     }],\n     *     metaData: {\n     *         cossFORMS_FORMS_LastHiddenScreens: [],\n     *         cossFORMS_FORMS_LastScreenName: \"Screen1\"\n     *     },\n     *     shouldReplaceSavedData: false\n     * });\n     * @example <caption>caseData format used in \"getRuntimeData\" API method</caption>\n     * this.coreApi.updateRuntimeData({\n     *     caseData: {\n     *         PI_FirstName: {\n     *             value: 'Andrew',\n     *             formattedValue: 'Andrew',\n     *             isValid: 'true'\n     *         }\n     *     },\n     *     metaData: {\n     *         cossFORMS_FORMS_LastHiddenScreens: [],\n     *         cossFORMS_FORMS_LastScreenName: \"Screen1\"\n     *     },\n     *     shouldReplaceSavedData: false\n     * });\n     */\n    updateRuntimeData(data) {\n        RuntimeActions.updateRuntimeFromExtenalSourceNoEmit(data);\n    }\n\n    /**\n     * Restores default values (if any) for specified fields. Won't restore in the following cases:\n     * - field is hidden\n     * - field is not a screen item\n     * - field already has a value\n     * - screen containing a field was visited\n     * @since v0.83.*\n     * @param {String[]} fieldNames - array of field names to attempt restoring default values for\n     * @example\n     * this.coreApi.restoreDefaultValues(['address1', 'amount_of_something']);\n     */\n    // TODO: make conditions for restoring default values configurable via SDK (see conditionsWhenUnableToRestoreDefaultValueForItem)\n    restoreDefaultValues(fieldNames) {\n        RuntimeActions.restoreDefaultValuesNoEmit(fieldNames);\n    }\n\n    /**\n     * Updates runtime UI according to runtime state\n     * @since v0.70.*\n     * @param {Boolean} forceRunRules - normally rules should run without this flag but under certain circumstances rules wouldn't run.\n     * If you still need to run rules under certain circumstances pass `true`.\n     * WARNING: don't pass `true` until you really need it. This could affect performance.\n     * `false` by default\n     * @example\n     * this.coreApi.refreshUI(true); // force running rules\n     * this.coreApi.refreshUI(); // rules would be run according to internal logic of runtime core\n     */\n    refreshUI(forceRunRules = false) {\n        RuntimeActions.refreshRuntime({ forceRunRules });\n    }\n\n    /**\n     * Definition of runtime state object items' names. To be used in in updateRuntimeState() and getRuntimeState() methods.\n     * @since v0.82.*\n     * @type {Object}\n     * @property {String} runtimeStateItems.CLIENT_DATA - key for runtime form values client data\n     * @property {String} runtimeStateItems.USER_DATA - key for user data\n     * @property {String} runtimeStateItems.PREVIOUS_SCREEN - key for a screen that had been active before event handler was called\n     * @property {String} runtimeStateItems.CURRENT_SCREEN - key for a currently active screen\n     * @property {String} runtimeStateItems.SCREENS_VISIBILITY - key for hidden screens' names array\n     * @property {String} runtimeStateItems.SCREENS_VALIDITY - key for the object which contains screens' validity statuses\n     * @property {String} runtimeStateItems.SOFT_LOCK_STATUS - key for the soft lock status\n     * @property {String} runtimeStateItems.HARD_LOCK_STATUS - key for the hard lock status\n     * @example\n     * var clientDataKey = this.coreApi.runtimeStateItems.CLIENT_DATA;\n     * var clientData = getRuntimeState(clientDataKey);\n     */\n    runtimeStateItems = runtimeStateItems;\n\n    /**\n     * Gets either all or specified runtime state items. Specified items' keys should match the ones defined in runtimeStateItems. Note: the list of acceptable/returned items corresponds to runtimeStateItems, which might be extended in future.\n     * @param {String|String[]|undefined} [itemNames] - name (or array of names) of runtime state item(s) to retrieve. If not specified, all available items will be returned.\n     * @returns {Object} runtime state data\n     * @property {Object} [data[runtimeStateItems.CLIENT_DATA]] - form values client data items\n     * @property {Object} [data[runtimeStateItems.USER_DATA]] - user data items (read only)\n     * @property {String} [data[runtimeStateItems.PREVIOUS_SCREEN]] - name of screen which was active before SDK action was invoked\n     * @property {String} [data[runtimeStateItems.CURRENT_SCREEN]] - name of current screen\n     * @property {Object} [data[runtimeStateItems.SCREENS_VISIBILITY]] - all screens' visibility statuses (true = visible, false = hidden)\n     * @property {Object} [data[runtimeStateItems.SCREENS_VALIDITY]] - all screens' validity statuses\n     * @property {Boolean} [data[runtimeStateItems.SOFT_LOCK_STATUS]] - true if the case is soft-locked\n     * @property {Boolean} [data[runtimeStateItems.HARD_LOCK_STATUS]] - true if the case is hard-locked\n     * @example\n     * const runtimeState = this.coreApi.getRuntimeState();\n     */\n    getRuntimeState(itemNames = _.values(this.runtimeStateItems)) {\n        if (_.isString(itemNames)) itemNames = [itemNames];\n\n        if (!_.isArray(itemNames)) return {};\n\n        const retrievalFunctionNames = {\n            // don't use RuntimeStore.getXXX.name instead of a string name 'getXXX' below, because\n            // in minified code .name will return \"value\" instead of a function name\n            [this.runtimeStateItems.CLIENT_DATA]: 'getPlainFormValues',\n            [this.runtimeStateItems.USER_DATA]: 'getPlainUserData',\n            [this.runtimeStateItems.PREVIOUS_SCREEN]: 'getPreviousScreenName',\n            [this.runtimeStateItems.CURRENT_SCREEN]: 'getCurrentScreenName',\n            [this.runtimeStateItems.SCREENS_VISIBILITY]: 'getScreensVisibility',\n            [this.runtimeStateItems.SCREENS_VALIDITY]: 'getScreensValidity',\n            [this.runtimeStateItems.SOFT_LOCK_STATUS]: 'getSoftLockStatus',\n            [this.runtimeStateItems.HARD_LOCK_STATUS]: 'getHardLockStatus'\n        };\n\n        const requestedItems = _.intersection(_.values(this.runtimeStateItems), itemNames);\n\n        return _.transform(\n            requestedItems,\n            (result, itemName) => {\n                const functionName = retrievalFunctionNames[itemName];\n                if (_.isFunction(RuntimeStore[functionName])) {\n                    result[itemName] = RuntimeStore[functionName]();\n                }\n            },\n            {}\n        );\n    }\n\n    /**\n     * Restores runtime state items (removes existing and applies the supplied data). Disregards internal logical data interconnections (e.g. will restore client data disregarding whether corresponding screen items are locked). Note: the list of acceptable items corresponds to runtimeStateItems, which might be extended in future.\n     * @since v0.82.*\n     * @param {Object} data - data to set into runtime. Object keys should match the ones defined in runtimeStateItems.\n     * @param {Object} [data[runtimeStateItems.CLIENT_DATA]] - form values client data items\n     * @param {String} [data[runtimeStateItems.CURRENT_SCREEN]] - name of screen to set as current\n     * @param {Object} [data[runtimeStateItems.SCREENS_VISIBILITY]] - visibility statuses of screens (true = visible, false = hidden)\n     * @param {Object} [data[runtimeStateItems.SCREENS_VALIDITY]] - validity statuses of screens (possible values: 'pristine', 'valid', 'invalid')\n     * @param {Boolean} [data[runtimeStateItems.SOFT_LOCK_STATUS]] - true to apply soft lock to lockable screens\n     * @param {Boolean} [data[runtimeStateItems.HARD_LOCK_STATUS]] - true to apply hard lock to all screens\n     * @returns undefined\n     */\n    restoreRuntimeState(data) {\n        if (!_.isPlainObject(data)) return;\n\n        const restoreActions = {\n            [this.runtimeStateItems.CLIENT_DATA]: RuntimeActions.restoreFieldValuesNoEmit,\n            [this.runtimeStateItems.CURRENT_SCREEN]: RuntimeActions.restoreCurrentScreenNoEmit,\n            [this.runtimeStateItems.SCREENS_VISIBILITY]:\n                RuntimeActions.restoreScreensVisibilityNoEmit,\n            [this.runtimeStateItems.SCREENS_VALIDITY]: RuntimeActions.restoreScreensValidityNoEmit,\n            [this.runtimeStateItems.SOFT_LOCK_STATUS]: RuntimeActions.restoreSoftLockStatusNoEmit,\n            [this.runtimeStateItems.HARD_LOCK_STATUS]: RuntimeActions.restoreHardLockStatusNoEmit\n        };\n\n        _.forOwn(data, (dataItem, dataItemName) => {\n            const action = restoreActions[dataItemName];\n            if (_.isFunction(action)) {\n                action(dataItem);\n            }\n        });\n    }\n\n    /**\n     * Updates runtime state items. Accounts for internal logical data interconnections (e.g. will not restore client data items if corresponding screen items are locked), so if you are updating several state items in one updateRuntimeState call (e.g. both locks and client data) some of the values may not apply due to logical data contradictions. It might make sense to split the single update operation into several updates, e.g.: updateRuntimeState(clientData) and updateRuntimeState(lockStatuses). Note: the list of acceptable items corresponds to runtimeStateItems, which might be extended in future.\n     * @since v0.82.*\n     * @param {Object} data - data to set into runtime. Object keys should match the ones defined in runtimeStateItems.\n     * @param {Object} [data[runtimeStateItems.CLIENT_DATA]] - form values client data items\n     * @param {String} [data[runtimeStateItems.CURRENT_SCREEN]] - name of screen to set as current\n     * @param {Object} [data[runtimeStateItems.SCREENS_VISIBILITY]] - visibility statuses of screens\n     * @param {Object} [data[runtimeStateItems.SCREENS_VALIDITY]] - validity statuses of screens\n     * @param {Boolean} [data[runtimeStateItems.SOFT_LOCK_STATUS]] - true to apply soft lock to lockable screens\n     * @param {Boolean} [data[runtimeStateItems.HARD_LOCK_STATUS]] - true to apply hard lock to all screens\n     * @returns undefined\n     */\n    updateRuntimeState(data) {\n        if (!_.isPlainObject(data)) return;\n\n        const updateActions = {\n            [this.runtimeStateItems.CLIENT_DATA]: RuntimeActions.updateFieldValuesNoEmit,\n            [this.runtimeStateItems.CURRENT_SCREEN]: RuntimeActions.updateCurrentScreenNoEmit,\n            [this.runtimeStateItems.SCREENS_VISIBILITY]:\n                RuntimeActions.updateScreensVisibilityNoEmit,\n            [this.runtimeStateItems.SCREENS_VALIDITY]: RuntimeActions.updateScreensValidityNoEmit,\n            [this.runtimeStateItems.SOFT_LOCK_STATUS]: RuntimeActions.updateSoftLockStatusNoEmit,\n            [this.runtimeStateItems.HARD_LOCK_STATUS]: RuntimeActions.updateHardLockStatusNoEmit\n        };\n\n        _.forOwn(data, (dataItem, dataItemName) => {\n            const action = updateActions[dataItemName];\n            if (_.isFunction(action)) {\n                action(dataItem);\n            }\n        });\n    }\n\n    /**\n     * Resets values of runtime state items. Note: the list of acceptable items corresponds to runtimeStateItems, which might be extended in future.\n     * @since v0.82.*\n     * @param {String|String[]|undefined} [itemNames] - name (or array of names) of runtime state item(s) to reset. If not specified, all available items will be reset.\n     * @param {String} [runtimeStateItems.CLIENT_DATA] - removes all form values client data items\n     * @param {String} [runtimeStateItems.CURRENT_SCREEN] - resets current screen to first available\n     * @param {String} [runtimeStateItems.SCREENS_VISIBILITY] - makes all screens visible\n     * @param {String} [runtimeStateItems.SCREENS_VALIDITY] - resets validity statuses of screens to \"pristine\"\n     * @param {String} [runtimeStateItems.SOFT_LOCK_STATUS] - removes soft lock\n     * @param {String} [runtimeStateItems.HARD_LOCK_STATUS] - removes hard lock\n     * @returns undefined\n     */\n    resetRuntimeState(itemNames = _.values(this.runtimeStateItems)) {\n        if (_.isString(itemNames)) itemNames = [itemNames];\n\n        if (!_.isArray(itemNames)) return {};\n\n        const resetActions = {\n            [this.runtimeStateItems.CLIENT_DATA]: RuntimeActions.resetFieldValuesNoEmit,\n            [this.runtimeStateItems.CURRENT_SCREEN]: RuntimeActions.resetCurrentScreenNoEmit,\n            [this.runtimeStateItems.SCREENS_VISIBILITY]:\n                RuntimeActions.resetScreensVisibilityNoEmit,\n            [this.runtimeStateItems.SCREENS_VALIDITY]: RuntimeActions.resetScreensValidityNoEmit,\n            [this.runtimeStateItems.SOFT_LOCK_STATUS]: RuntimeActions.resetSoftLockStatusNoEmit,\n            [this.runtimeStateItems.HARD_LOCK_STATUS]: RuntimeActions.resetHardLockStatusNoEmit\n        };\n        const requestedItems = _.intersection(_.values(this.runtimeStateItems), itemNames);\n\n        _.forEach(requestedItems, itemName => {\n            const action = resetActions[itemName];\n            if (_.isFunction(action)) {\n                action();\n            }\n        });\n    }\n\n    /**\n     * Retrieves all properties of the field with specified name. This is how you can get the item type, default value and other properties.\n     * @since v0.82.*\n     * @param {String} name - name of the client data item to retrieve\n     * @returns {Object | null} found item or null\n     * @example\n     * this.coreApi.getFieldByName('myTextBox');\n     */\n    getFieldByName(name) {\n        return _.cloneDeep(RuntimeStore.getItemByName(name));\n    }\n\n    /**\n     * Retrieves user data item type by its name.\n     * @since v0.85.*\n     * @param {String} name - name of the user data item to retrieve\n     * @returns {String | undefined} found data item type or undefined\n     * @example\n     * this.coreApi.getUserDataTypeByName('CompanyID');\n     */\n    getUserDataTypeByName(name) {\n        return RuntimeStore.getUserDataType(name);\n    }\n\n    /**\n     * Retrieves product property value by its name.\n     * @since v0.91.*\n     * @param {String} name - name of the product property to retrieve\n     * @returns {String | undefined} product property value or defaul value from ProductPropertiesConfig (if property was found). Otherwise - undefined.\n     * @example\n     * this.coreApi.getStringProductPropertyByName('CA_for_ViewPDF');\n     */\n    getStringProductPropertyByName(name) {\n        return RuntimeProductPropertiesStore.getStringPropertyByName(name);\n    }\n\n    /**\n     * Shows splash screen with spinner. Practical for time-consuming operations.\n     * @since v0.91.*\n     * @param {String} loaderId - sometimes you need to show loaders for different purposes\n     *          simultaneously and hide the loading spinner only after all of the loaders were hidden by calling `hideLoader`.\n     *          This `loaderId` helps to queue loading operations\n     *\n     * @param {String} message - if not empty shows message under the spinner. Message would not be preserved for next loader (hide -> show)\n     * @example\n     * this.coreApi.showLoader();\n     * setTimeout(this.coreApi.hideLoader, 1000);\n     *\n     *\n     * @example\n     * this.coreApi.showLoader('myLoader1');\n     * setTimeout(this.coreApi.hideLoader, 500);\n     *\n     * this.coreApi.showLoader('myLoader2');\n     * setTimeout(this.coreApi.hideLoader, 1200);\n     *\n     * // Outcomes: loader will be shown as soon as 1st `showLoader` is called\n     * // and will be hidden (without blinking) after 1200ms (after latest `hideLoader` is called)\n     *\n     */\n    showLoader(loaderId = DEFAULT_API_LOADER_ID, message = '') {\n        show(loaderId, false, message);\n    }\n\n    /**\n     * Hides splash screen with spinner.\n     * NOTE: number of hideLoader calls should equal the number of previous showLoader calls to actually hide a progress screen.\n     * @since v0.91.*\n     * @param {String} loaderId - sometimes you need to show loaders for different purposes\n     *          simultaneously and hide the loading spinner only after all of the loaders were hidden by calling `hideLoader`.\n     *          This `loaderId` helps to queue loading operations\n     * @example\n     * this.coreApi.showLoader();\n     * setTimeout(this.coreApi.hideLoader, 1000);\n     */\n    hideLoader(loaderId = DEFAULT_API_LOADER_ID) {\n        hide(loaderId);\n    }\n\n    /**\n     * Show modal window on the screen.\n     * @param {React.Component | string} modalWindowComponent - React Component or modal window body as html string\n     * @example\n     *\n     * // NOTE: When you use plain string with html to show modal window,\n     * // then this string should contain only a content of the window body.\n     * // It will be wrapped by ReactBootstrap.Modal component and appear on the screen via react's `dangerouslySetInnerHTML` attribute.\n     * // This mean that you should care about xss by yourself.\n     * var modalContent = ''+\n     *      '<div class=\"modal-content\" role=\"document\">' +\n     *           '<div class=\"modal-header\">' +\n     *              '<button type=\"button\" class=\"close\" aria-label=\"Close\" onclick=\"global.App.runtimeCoreApi.hideModal()\">' +\n     *                  '<span aria-hidden=\"true\">×</span>' +\n     *              '</button>' +\n     *              '<h4 class=\"modal-title\">View PDF in the iframe</h4>' +\n     *          '</div>' +\n     *          '<div class=\"modal-body\">' +\n     *              '<iframe src=\"http://eloquentjavascript.net/Eloquent_JavaScript.pdf\" style=\"border: none; width: 100%; height: 570px;\"></iframe>' +\n     *          '</div>' +\n     *          '<div class=\"modal-footer\">' +\n     *              '<button type=\"button\" class=\"btn btn-default\" onclick=\"global.App.runtimeCoreApi.hideModal()\">' +\n     *                  'Close' +\n     *              '</button>' +\n     *              '<a href=\"http://eloquentjavascript.net/Eloquent_JavaScript.pdf\" download=\"\" class=\"btn btn-primary\" role=\"button\">' +\n     *                  'Save/Download as PDF' +\n     *              '</a>' +\n     *          '</div>' +\n     *      '</div>' +\n     * '';\n     * this.coreApi.showModal(modalContent);\n     *\n     * // or\n     * var coreApi = this;\n     * var modalWindowComponent = React.createClass({\n     *      render: function() {\n     *         return React.createElement(\n     *              ReactBootstrap.Modal,\n     *              { animation: false, show: true, onHide: coreApi.hideModal },\n     *              [\n     *                  React.createElement(\n     *                      ReactBootstrap.ModalHeader,\n     *                      { closeButton: true, key: 'view-pdf-header' },\n     *                      React.createElement(ReactBootstrap.ModalTitle, null, 'View as PDF')\n     *                  ),\n     *                  React.createElement(\n     *                      ReactBootstrap.ModalBody,\n     *                      { key: 'view-pdf-body' },\n     *                      React.createElement('iframe', {\n     *                          src: 'http://eloquentjavascript.net/Eloquent_JavaScript.pdf',\n     *                          style: { border: 'none', width: '100%', height: '570px' }\n     *                      })\n     *                  ),\n     *                  React.createElement(ReactBootstrap.ModalFooter, { key: 'view-pdf-footer' }, [\n     *                      React.createElement(\n     *                          ReactBootstrap.Button,\n     *                          { onClick: coreApi.hideModal, key: 'view-pdf-btn-close' },\n     *                          'Close'\n     *                      ),\n     *                      React.createElement(\n     *                          ReactBootstrap.Button,\n     *                          {\n     *                              href: 'http://eloquentjavascript.net/Eloquent_JavaScript.pdf',\n     *                              download: true,\n     *                              bsStyle: 'primary',\n     *                              key: 'view-pdf-btn-save'\n     *                          },\n     *                          'Save/Download as PDF'\n     *                      )\n     *                  ])\n     *              ]\n     *          );\n     *     }\n     * });\n     * this.coreApi.showModal(modalWindowComponent);\n     */\n    showModal(modalWindowComponent) {\n        if (_.isFunction(modalWindowComponent)) {\n            return RuntimeActions.showModalWindow(modalWindowComponent);\n        }\n\n        if (_.isString(modalWindowComponent)) {\n            const coreApi = this;\n            class WrappedModalWindowComponent extends React.Component {\n                shouldComponentUpdate() {\n                    return false;\n                }\n                render() {\n                    return React.createElement(\n                        Modal,\n                        { animation: false, show: true, onHide: coreApi.hideModal },\n                        React.createElement('div', {\n                            dangerouslySetInnerHTML: { __html: modalWindowComponent }\n                        })\n                    );\n                }\n            }\n            RuntimeActions.showModalWindow(WrappedModalWindowComponent);\n        }\n    }\n\n    /**\n     * Hide modal window on the screen.\n     * @example\n     * this.coreApi.hideModal();\n     */\n    hideModal() {\n        RuntimeActions.hideModalWindow();\n    }\n\n    /**\n     * Returns upload file container component.\n     * @since v0.87.*\n     * @param {Object} props  - properties for component\n     * @param {String} props.defaultFileName - default file name from event action\n     * @param {String} props.maxFileSize - max files size in bytes, default 1000000000\n     * @param {String} props.allowedFileTypes - array of allowed file types, default ['pdf', 'docx']\n     * @param {String} props.maxFileNameLength - max filename input length\n     * @param {String} props.maxDescriptionLength - max description input length\n     * @example\n     * // example of the response on call getFilesListCallback\n     * {\n     *  \"files\": [{\n     *      name: 'filename',\n     *      id: 1, // id will be used in deleteFileCallback and downloadFileCallback\n     *      description: 'description',\n     *      size: 123123,\n     *      url: 'path to file' // url will be used for file preview\n     *      }]\n     * }\n     * @returns react component\n     */\n    renderUploadFileComponent(props) {\n        const { defaultFileName } = props;\n        const getFilesListCallback = serviceRequestProvider.getFilesList;\n        const deleteFileCallback = serviceRequestProvider.deleteFile;\n        const downloadFileCallback = serviceRequestProvider.downloadFile;\n        const hideModal = this.hideModal;\n\n        // receive endpoint for upload file\n        const uploadFileEndpoint = this.getApiEndpoint('upload_form_upload_file_endpoint');\n        const setCustomVariableOnUploadSuccess = () => {\n            this.updateRuntimeState({\n                clientData: { [`${ATTACHMENT_ID_PREFIX}${defaultFileName}`]: { value: 'OK' } }\n            });\n        };\n\n        return (\n            <UploadFileModal\n                {...props}\n                getFilesListCallback={getFilesListCallback}\n                deleteFileCallback={deleteFileCallback}\n                downloadFileCallback={downloadFileCallback}\n                previewFileCallback={url => {\n                    window.open(url, '_blank');\n                }}\n                hideModal={hideModal}\n                uploadFileEndpoint={uploadFileEndpoint}\n                setCustomVariableOnUploadSuccess={setCustomVariableOnUploadSuccess}\n            />\n        );\n    }\n\n    /**\n     * Returns show attachments component.\n     * @since v0.87.*\n     * @returns react component\n     */\n    renderShowAttachmentsComponent() {\n        const hideModal = this.hideModal;\n\n        const getFilesListCallback = serviceRequestProvider.getFilesList;\n        const deleteFileCallback = serviceRequestProvider.deleteFile;\n        const downloadFileCallback = serviceRequestProvider.downloadFile;\n\n        return (\n            <ShowAttachmentsModal\n                hideModal={hideModal}\n                getFilesListCallback={getFilesListCallback}\n                deleteFileCallback={deleteFileCallback}\n                downloadFileCallback={downloadFileCallback}\n                previewFileCallback={url => {\n                    window.open(url, '_blank');\n                }}\n                showOnlyAttachments={true}\n            />\n        );\n    }\n\n    /**\n     * Returns api endpoint by api method name\n     * @param {String} apiMethodName\n     * @since v0.87.*\n     * @returns {String} - apiEndpoint\n     */\n    getApiEndpoint(apiMethodName) {\n        const { error, apiMethod: apiEndpoint } = getAPIMethod(apiMethodName);\n        if (error) {\n            logger.runtime.coreApi.error(error);\n        }\n        return apiEndpoint;\n    }\n\n    /**\n     * Prepare index html for the nested application.\n     * @param  {string} versionRef - version id of nested application;\n     * @param  {string} appStaticPath - root path of host application;\n     * @param  {object} configs - object with following application configs: `appConfig`, `apiConfig`, `queryVariables`, `uiConfig`;\n     * @param  {string} [nestedAppScript=''] - customization script that can be provided to do some work when nested app is loaded;\n     * @return {Promise<string>} - a promise of the index html to be built.\n     */\n    async generateIndexHtmlForNested(versionRef, appStaticPath, configs, nestedAppScript = '') {\n        const destiny = this.getDestiny();\n        const assetPath = buildAssetPathToNestedVersion(versionRef, appStaticPath, destiny);\n\n        const templates = await this.serviceRequestProvider.getNestedAppTemplates(assetPath);\n\n        const indexHtml = buildNestedAppIndex({\n            templates,\n            configs,\n            assetPath,\n            nestedAppScript\n        });\n\n        return indexHtml;\n    }\n\n    /**\n     * Converts Smarty Streets predictions.\n     * @since v0.91.*\n     * @param {Object} predictions - Smarty Streets predictions (https://smartystreets.com/docs/cloud/us-autocomplete-api)\n     * @returns {Array} - converted Smarty Streets predictions\n     * Example of output data:\n     * [\n     *   {\n     *     name: '1 S 865 E, Sandy UT',\n     *     id: '1 S 865 E, Sandy UT',\n     *     data: {\n     *          street: '1 S 865 E',\n     *          city: 'Sandy',\n     *          state: 'UT'\n     *     }\n     *   },\n     *   {\n     *     name: '1 N 9th St, Munson PA',\n     *     id: '1 N 9th St, Munson PA',\n     *     data: {\n     *          street: '1 N 9th St',\n     *          city: 'Munson',\n     *          state: 'PA'\n     *     }\n     *   }\n     * ]\n     * @example\n     * this.coreApi.convertSmartyStreetsPredictions({\n     *      suggestions: [\n     *          {\n     *              city: 'Sandy',\n     *              state: 'UT',\n     *              street_line: '1 S 865 E',\n     *              text: '1 S 865 E, Sandy UT'\n     *          },\n     *          {\n     *              city: 'Munson',\n     *              state: 'PA',\n     *              street_line: '1 N 9th St',\n     *              text: '1 N 9th St, Munson PA'\n     *          }\n     *      ]\n     * });\n     */\n    convertSmartyStreetsPredictions(predictions) {\n        return convertSmartyStreetsPredictionsToOptions(predictions);\n    }\n\n    /**\n     * Converts Google Places predictions.\n     * @since v0.91.*\n     * @param {Array} predictions - Google Places predictions (https://developers.google.com/places/web-service/autocomplete#place_autocomplete_results)\n     * @returns {Array} - converted Google Places predictions\n     * Example of output data:\n     * [\n     *   {\n     *     name: 'Santa Fe 1212, Rosario, Santa Fe Province, Argentina',\n     *     id: 'Santa Fe 1212, Rosario, Santa Fe Province, Argentina',\n     *     data: {\n     *          placeId: 'ChIJp_CTIhirt5URQA_cG8AtSbM'\n     *     }\n     *   },\n     *   {\n     *     name: '1085-1087 Boylston Street, Boston, MA, USA',\n     *     id: '1085-1087 Boylston Street, Boston, MA, USA',\n     *     data: {\n     *          placeId: 'ChIJjcKMJBt644kRVXqk_329y6o'\n     *     }\n     *   }\n     * ]\n     * @example\n     * this.coreApi.convertGooglePlacesPredictions([\n     *     {\n     *         description: 'Santa Fe 1212, Rosario, Santa Fe Province, Argentina',\n     *         id: '39ea0fe03f10e0a6f6191ba6019e798e5afb6d7f',\n     *         place_id: 'ChIJp_CTIhirt5URQA_cG8AtSbM',\n     *         ...\n     *     },\n     *     {\n     *         description: '1085-1087 Boylston Street, Boston, MA, USA',\n     *         id: '1ae260ae026bc6f447136e7b98a30bc68fb99fbc',\n     *         place_id: 'ChIJjcKMJBt644kRVXqk_329y6o',\n     *         ...\n     *     }\n     * ]);\n     */\n    convertGooglePlacesPredictions(predictions) {\n        return convertGooglePlacesPredictionsToOptions(predictions);\n    }\n\n    /**\n     * Parses Smarty Streets address details.\n     * @since v0.91.*\n     * @param {Array} addressDetails - Smarty Streets address details (https://smartystreets.com/docs/cloud/us-street-api)\n     * @returns {Object} - parsed Smarty Streets address details\n     * @property {string} country - country\n     * @property {string} city - city\n     * @property {string} state - state\n     * @property {string} address - address\n     * @property {string} zip - zip code\n     * Example of output data:\n     * {\n     *    address: \"222 Vellenorth Rd\",\n     *    city: \"Blue Ridge\",\n     *    country: \"US\",\n     *    state: \"GA\",\n     *    zip: \"30513-2813\"\n     * }\n     * @example\n     * this.coreApi.parseSmartyStreetsAddress([\n     *      {\n     *          components: {\n     *              city_name: 'Blue Ridge'\n     *              street_name: 'Vellenorth',\n     *              zipcode: '30513',\n     *              plus4_code: '2813',\n     *              ...\n     *          },\n     *          ...\n     *      }\n     * ]);\n     */\n    parseSmartyStreetsAddress(addressDetails) {\n        return parseSmartyStreetsAddress(addressDetails);\n    }\n\n    /**\n     * Parses Google Places address details.\n     * @since v0.91.*\n     * @param {Object} addressDetails - Google Places address details (https://developers.google.com/places/web-service/details#PlaceDetailsResults)\n     * @returns {Object} - parsed Google Places address details\n     * @property {string} country - country\n     * @property {string} city - city\n     * @property {string} state - state\n     * @property {string} address - address\n     * @property {string} zip - zip code\n     * Example of output data:\n     * {\n     *    address: \"1085-1087 Boylston Street\",\n     *    city: \"Boston\",\n     *    country: \"USA\",\n     *    state: \"MA\",\n     *    zip: \"02215\"\n     * }\n     * @example\n     * this.coreApi.parseGooglePlacesAddress({\n     *      address_components: [\n     *          {\n     *              long_name: '1085-1087',\n     *              short_name: '1085-1087',\n     *              types: [ 'street_number' ]\n     *          },\n     *          {\n     *              long_name: 'Boylston Street',\n     *              short_name: 'Boylston St',\n     *              types: [ 'route' ]\n     *          },\n     *          ...\n     *      ],\n     *      ...\n     * });\n     */\n    parseGooglePlacesAddress(addressDetails) {\n        return parseGooglePlacesAddress(addressDetails);\n    }\n\n    /**\n     * Get application destiny\n     * @return {string|null} application destiny value `application`, `clickwrap` or null;\n     */\n    getDestiny() {\n        return RuntimeStore.getState().destiny;\n    }\n\n    /**\n     * Finds next visible screen, opens it and then waits asynchronously until it's open,\n     * as changing screen triggers events which could have asynchronous effects (beforeloadscreen, beforeleavescreen, etc...).\n     * A screen is considered open when it's fully rendered and waits for user interaction.\n     * In other words after screen is rendered nothing should be changed by application itself (for example field validation change) until user interacts with the screen.\n     * @since v0.106.*\n     * @returns {Promise<boolean>} - true, in case of next visible screen found and opened,\n     *  false - in case of current screen is last visible or next visible screen wasn't opened\n     */\n    async openNextVisibleScreen() {\n        const screenName = RuntimeStore.getScreenNameByIndex(RuntimeStore.findNextPage());\n        if (!screenName) return false; // current screen is last visible\n\n        return await this.openScreenByName(screenName);\n    }\n\n    /**\n     * Opens screen and waits asynchronously until it's open,\n     * as changing screen triggers events which could have asynchronous effects (beforeloadscreen, beforeleavescreen, etc...).\n     * A screen is considered open when it's fully rendered and waits for user interaction.\n     * In other words after screen is rendered nothing should be changed by application itself (for example field validation change) until user interacts with the screen.\n     * @since v0.106.*\n     * @param {string} screenName - name of screen to open\n     * @returns {Promise<boolean>} - true, in case of screen found and opened,\n     *  false - in case of screen wasn't opened\n     */\n    async openScreenByName(screenName) {\n        try {\n            await switchToScreenAndWaitWhileItWaitsForUserInput(async () => {\n                const eventName = `${OPEN_SCREEN}:${screenName}`;\n                EventManager.bindOnce(eventName, [gotoScreen.bind(undefined, screenName)]);\n                await EventManager.emit(eventName);\n            });\n        } catch (e) {\n            logger.runtime.coreApi.error(e);\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Opens first incomplete screen and waits asynchronously until it's open,\n     * as changing screen triggers events which could have asynchronous effects (beforeloadscreen, beforeleavescreen, etc...).\n     * A screen is considered open when it's fully rendered and waits for user interaction.\n     * In other words after screen is rendered nothing should be changed by application itself (for example field validation change) until user interacts with the screen.\n     * @since v0.106.*\n     * @returns {Promise<boolean>} - true, in case of first incomplete screen found and opened,\n     *  false - in case of current screen is first incomplete screen wasn't opened\n     */\n    async openFirstIncompleteScreen() {\n        try {\n            await switchToScreenAndWaitWhileItWaitsForUserInput(async () => {\n                const eventName = `${OPEN_SCREEN}:firstIncomplete`;\n                EventManager.bindOnce(eventName, [gotoFirstIncompleteScreen]);\n                await EventManager.emit(eventName);\n            });\n        } catch (e) {\n            logger.runtime.coreApi.error(e);\n            return false;\n        }\n\n        return true;\n    }\n}\n\nexport const runtimeCoreApiInstance = new RuntimeCoreAPI();\n\nconst switchToScreenAndWaitWhileItWaitsForUserInput = async screenOpenerFn => {\n    // TODO: need to be sure, that event queue is empty so for and if it isn't - wait.\n    //  Otherwise it could potentially call `SCREEN_HAS_BEEN_SWITCHED` in other events in current queue.\n\n    let screenHasBeenSwitched;\n    let screenHasNotBeenSwitched;\n    const mainPromise = new Promise((resolve, reject) => {\n        screenHasBeenSwitched = resolve;\n        screenHasNotBeenSwitched = reject;\n    });\n\n    // Wait for React view to emit that screen has been changed\n    const hasBeenSwitchedBindId = EventManager.bindOnce(SCREEN_HAS_BEEN_SWITCHED, [\n        screenHasBeenSwitched\n    ]);\n\n    let shouldListenForReRender = false;\n    EventManager.bindOnce(SCREEN_IS_GOING_TO_BE_SWITCHED, [\n        () => {\n            shouldListenForReRender = true;\n        }\n    ]);\n\n    await screenOpenerFn();\n\n    // if during `screenOpenerFn` event `SCREEN_IS_GOING_TO_BE_SWITCHED` hasn't happened then screen won't be changed and re-rendered\n    // -> resolve awaiting promise and remove rendering listener `SCREEN_HAS_BEEN_SWITCHED`\n    await new Promise(r => setTimeout(r, 0));\n\n    if (!shouldListenForReRender) {\n        EventManager.removeListenerByEventNameAndHandlersId(\n            SCREEN_HAS_BEEN_SWITCHED,\n            hasBeenSwitchedBindId\n        );\n        screenHasNotBeenSwitched();\n    }\n\n    await mainPromise;\n};\n",
    "static": true,
    "longname": "/var/lib/jenkins/workspace/Screen Designer/NGEN - Screen Designer/ngen_screen_designer-0.107.5/src/runtime/sdk/RuntimeCoreAPI.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "USE_DIRTY_DATA",
    "memberof": "sdk/RuntimeCoreAPI.js",
    "static": true,
    "longname": "sdk/RuntimeCoreAPI.js~USE_DIRTY_DATA",
    "access": "public",
    "export": false,
    "importPath": "ipln-scrd/sdk/RuntimeCoreAPI.js",
    "importStyle": null,
    "description": "SDK API class.\nProvides implementations to use in SDK",
    "lineNumber": 40,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "USE_FULL_DATA",
    "memberof": "sdk/RuntimeCoreAPI.js",
    "static": true,
    "longname": "sdk/RuntimeCoreAPI.js~USE_FULL_DATA",
    "access": "public",
    "export": false,
    "importPath": "ipln-scrd/sdk/RuntimeCoreAPI.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "DEFAULT_API_LOADER_ID",
    "memberof": "sdk/RuntimeCoreAPI.js",
    "static": true,
    "longname": "sdk/RuntimeCoreAPI.js~DEFAULT_API_LOADER_ID",
    "access": "public",
    "export": false,
    "importPath": "ipln-scrd/sdk/RuntimeCoreAPI.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "_externalDataProcessor",
    "memberof": "sdk/RuntimeCoreAPI.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "sdk/RuntimeCoreAPI.js~_externalDataProcessor",
    "access": "private",
    "export": false,
    "importPath": "ipln-scrd/sdk/RuntimeCoreAPI.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "rawData",
        "types": [
          "*"
        ]
      },
      {
        "name": "isDirty",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "{\"caseData\": *, \"metaData\": *, \"eliminatedAndEmptyFields\": *, \"shouldReplaceSavedData\": *, \"hasAttachment\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "class",
    "name": "RuntimeCoreAPI",
    "memberof": "sdk/RuntimeCoreAPI.js",
    "static": true,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/RuntimeCoreAPI.js",
    "importStyle": "RuntimeCoreAPI",
    "description": "Runtime Core API",
    "lineNumber": 65,
    "interface": false
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "clientDataAdapter",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#clientDataAdapter",
    "access": "public",
    "description": "Provides access to existing data adapters",
    "examples": [
      "const clientData = this.api.getRuntimeData();\nconst transformedClientData = this.api.clientDataAdapter.iGo.transformDataToSave(clientData);"
    ],
    "lineNumber": 78,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "iGo",
        "description": "data adapter for iGo"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "iGo.transformDataToSave",
        "description": "function to transform data from runtime to server format, to use before saving on server"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "iGo.transformLoadedData",
        "description": "function to transform data loaded from server into runtime format, to adapt data loaded from server"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "iGoDirtyData",
        "description": "dirty data adapter for iGo"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "iGoDirtyData.transformDataToSave",
        "description": "function to transform dirty data from runtime to server format, to use before saving on server"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "iGoDirtyData.transformLoadedData",
        "description": "function to transform dirty data loaded from server into runtime format, to adapt data loaded from server"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "serviceRequestProvider",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#serviceRequestProvider",
    "access": "public",
    "description": "Object that contains methods for making pre-configured external calls",
    "examples": [
      "const result = this.coreApi.serviceRequestProvider.callService(assemblyName, transformedClientData, runtimeState, shouldCallInBackground)"
    ],
    "lineNumber": 121,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "sdkEventHandlerNames",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#sdkEventHandlerNames",
    "access": "public",
    "description": "Definition of SDK event handlers' names. To be used when overriding implementations of SDK event handlers.",
    "examples": [
      "var saveDataHandlerName = this.coreApi.sdkEventHandlerNames.SAVE_DATA;"
    ],
    "lineNumber": 129,
    "since": "v0.82.*",
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "Promise",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#Promise",
    "access": "public",
    "description": "Cross-browser implementation of JS Promise. To use wherever SDK expects params of Promise type.",
    "examples": [
      "return this.coreApi.Promise.resolve(data);"
    ],
    "lineNumber": 136,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "getRuntimeData",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#getRuntimeData",
    "access": "public",
    "description": "Gets form values client data",
    "examples": [
      "const clientData = this.coreApi.getRuntimeData();\n// returned data example:\n// clientData = {\n//   myDropdown: {\n//     value\": \"Washington\",\n//     formattedValue\": \"USA\",\n//   },\n//   someTextbox\": {\n//     value\": \"some text\",\n//     formattedValue: \"some text\"\n//   },\n//   cossFORMS_FORMS_LastHiddenScreens: {\n//     value: \"[\\\"Screen 1\\\"]\"\n//   }\n// }"
    ],
    "lineNumber": 159,
    "deprecated": "Use getRuntimeState(runtimeStateItems.CLIENT_DATA) instead",
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "data with field names as keys"
    },
    "params": []
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "getRuntimeDirtyData",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#getRuntimeDirtyData",
    "access": "public",
    "description": "Gets \"dirty\" form values client data. The data is considered \"dirty\" if it was modified since last execution of \"resetDirtyData\" API method. Note: \"resetDirtyData\" is implicitly executed upon loading data from iGo in \"saveData\", \"callCustomAssembly\" and other similar methods.",
    "examples": [
      "const clientData = this.coreApi.getRuntimeDirtyData();\n// returned data example:\n// clientData = {\n//   myDropdown: {\n//     value\": \"Washington\",\n//     formattedValue\": \"USA\",\n//   },\n//   someTextbox\": {\n//     value\": \"some text\",\n//     formattedValue: \"some text\"\n//   },\n//   cossFORMS_FORMS_LastHiddenScreens: {\n//     value: \"[\\\"Screen 1\\\"]\"\n//   }\n// }"
    ],
    "lineNumber": 184,
    "since": "v0.83.*",
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "data with field names as keys"
    },
    "params": []
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "resetDirtyData",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#resetDirtyData",
    "access": "public",
    "description": "Resets \"dirty\" state of client data. See description of \"getRuntimeDirtyData\" API method.",
    "examples": [
      "this.coreApi.resetDirtyData();"
    ],
    "lineNumber": 194,
    "params": [],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "updateRuntimeData",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#updateRuntimeData",
    "access": "public",
    "description": "Updates runtime state",
    "examples": [
      "<caption>Legacy caseData format</caption>\nthis.coreApi.updateRuntimeData({\n    caseData: [{\n        name: 'PI_FirstName',\n        value: 'Andrew',\n        formattedValue: 'Andrew',\n        isValid: 'true'\n    }],\n    metaData: {\n        cossFORMS_FORMS_LastHiddenScreens: [],\n        cossFORMS_FORMS_LastScreenName: \"Screen1\"\n    },\n    shouldReplaceSavedData: false\n});",
      "<caption>caseData format used in \"getRuntimeData\" API method</caption>\nthis.coreApi.updateRuntimeData({\n    caseData: {\n        PI_FirstName: {\n            value: 'Andrew',\n            formattedValue: 'Andrew',\n            isValid: 'true'\n        }\n    },\n    metaData: {\n        cossFORMS_FORMS_LastHiddenScreens: [],\n        cossFORMS_FORMS_LastScreenName: \"Screen1\"\n    },\n    shouldReplaceSavedData: false\n});"
    ],
    "lineNumber": 237,
    "deprecated": "Use updateRuntimeState() instead",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "runtime state data to set"
      },
      {
        "nullable": null,
        "types": [
          "Object[]",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.caseData",
        "description": "form values data array or object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data.metaData",
        "description": "metadata object"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "data.shouldReplaceSavedData",
        "description": "set \"true\" if provided data should entirely replace existing runtime data, set \"false\" if only provided values should be replaced in existing runtime data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "data.hasAttachment",
        "description": "set \"true\" if Attachment controls should be displayed in Navigation panel"
      },
      {
        "nullable": null,
        "types": [
          "Immutable.Map[]"
        ],
        "spread": false,
        "optional": false,
        "name": "data.eliminatedAndEmptyFields",
        "description": "array of controls for which their default values need to be restored"
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "restoreDefaultValues",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#restoreDefaultValues",
    "access": "public",
    "description": "Restores default values (if any) for specified fields. Won't restore in the following cases:\n- field is hidden\n- field is not a screen item\n- field already has a value\n- screen containing a field was visited",
    "examples": [
      "this.coreApi.restoreDefaultValues(['address1', 'amount_of_something']);"
    ],
    "lineNumber": 253,
    "since": "v0.83.*",
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldNames",
        "description": "array of field names to attempt restoring default values for"
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "refreshUI",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#refreshUI",
    "access": "public",
    "description": "Updates runtime UI according to runtime state",
    "examples": [
      "this.coreApi.refreshUI(true); // force running rules\nthis.coreApi.refreshUI(); // rules would be run according to internal logic of runtime core"
    ],
    "lineNumber": 268,
    "since": "v0.70.*",
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "forceRunRules",
        "description": "normally rules should run without this flag but under certain circumstances rules wouldn't run.\nIf you still need to run rules under certain circumstances pass `true`.\nWARNING: don't pass `true` until you really need it. This could affect performance.\n`false` by default"
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "runtimeStateItems",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#runtimeStateItems",
    "access": "public",
    "description": "Definition of runtime state object items' names. To be used in in updateRuntimeState() and getRuntimeState() methods.",
    "examples": [
      "var clientDataKey = this.coreApi.runtimeStateItems.CLIENT_DATA;\nvar clientData = getRuntimeState(clientDataKey);"
    ],
    "lineNumber": 288,
    "since": "v0.82.*",
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "runtimeStateItems.CLIENT_DATA",
        "description": "key for runtime form values client data"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "runtimeStateItems.USER_DATA",
        "description": "key for user data"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "runtimeStateItems.PREVIOUS_SCREEN",
        "description": "key for a screen that had been active before event handler was called"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "runtimeStateItems.CURRENT_SCREEN",
        "description": "key for a currently active screen"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "runtimeStateItems.SCREENS_VISIBILITY",
        "description": "key for hidden screens' names array"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "runtimeStateItems.SCREENS_VALIDITY",
        "description": "key for the object which contains screens' validity statuses"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "runtimeStateItems.SOFT_LOCK_STATUS",
        "description": "key for the soft lock status"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "runtimeStateItems.HARD_LOCK_STATUS",
        "description": "key for the hard lock status"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "getRuntimeState",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#getRuntimeState",
    "access": "public",
    "description": "Gets either all or specified runtime state items. Specified items' keys should match the ones defined in runtimeStateItems. Note: the list of acceptable/returned items corresponds to runtimeStateItems, which might be extended in future.",
    "examples": [
      "const runtimeState = this.coreApi.getRuntimeState();"
    ],
    "lineNumber": 305,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} runtime state data"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "String[]",
          "undefined"
        ],
        "spread": false,
        "optional": true,
        "name": "itemNames",
        "description": "name (or array of names) of runtime state item(s) to retrieve. If not specified, all available items will be returned."
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.CLIENT_DATA]",
        "description": "form values client data items"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.USER_DATA]",
        "description": "user data items (read only)"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.PREVIOUS_SCREEN]",
        "description": "name of screen which was active before SDK action was invoked"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.CURRENT_SCREEN]",
        "description": "name of current screen"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.SCREENS_VISIBILITY]",
        "description": "all screens' visibility statuses (true = visible, false = hidden)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.SCREENS_VALIDITY]",
        "description": "all screens' validity statuses"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.SOFT_LOCK_STATUS]",
        "description": "true if the case is soft-locked"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.HARD_LOCK_STATUS]",
        "description": "true if the case is hard-locked"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "runtime state data"
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "restoreRuntimeState",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#restoreRuntimeState",
    "access": "public",
    "description": "Restores runtime state items (removes existing and applies the supplied data). Disregards internal logical data interconnections (e.g. will restore client data disregarding whether corresponding screen items are locked). Note: the list of acceptable items corresponds to runtimeStateItems, which might be extended in future.",
    "lineNumber": 349,
    "since": "v0.82.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "undefined"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data to set into runtime. Object keys should match the ones defined in runtimeStateItems."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.CLIENT_DATA]",
        "description": "form values client data items"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.CURRENT_SCREEN]",
        "description": "name of screen to set as current"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.SCREENS_VISIBILITY]",
        "description": "visibility statuses of screens (true = visible, false = hidden)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.SCREENS_VALIDITY]",
        "description": "validity statuses of screens (possible values: 'pristine', 'valid', 'invalid')"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.SOFT_LOCK_STATUS]",
        "description": "true to apply soft lock to lockable screens"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.HARD_LOCK_STATUS]",
        "description": "true to apply hard lock to all screens"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "undefined"
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "updateRuntimeState",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#updateRuntimeState",
    "access": "public",
    "description": "Updates runtime state items. Accounts for internal logical data interconnections (e.g. will not restore client data items if corresponding screen items are locked), so if you are updating several state items in one updateRuntimeState call (e.g. both locks and client data) some of the values may not apply due to logical data contradictions. It might make sense to split the single update operation into several updates, e.g.: updateRuntimeState(clientData) and updateRuntimeState(lockStatuses). Note: the list of acceptable items corresponds to runtimeStateItems, which might be extended in future.",
    "lineNumber": 382,
    "since": "v0.82.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "undefined"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "data to set into runtime. Object keys should match the ones defined in runtimeStateItems."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.CLIENT_DATA]",
        "description": "form values client data items"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.CURRENT_SCREEN]",
        "description": "name of screen to set as current"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.SCREENS_VISIBILITY]",
        "description": "visibility statuses of screens"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.SCREENS_VALIDITY]",
        "description": "validity statuses of screens"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.SOFT_LOCK_STATUS]",
        "description": "true to apply soft lock to lockable screens"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "data[runtimeStateItems.HARD_LOCK_STATUS]",
        "description": "true to apply hard lock to all screens"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "undefined"
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "resetRuntimeState",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#resetRuntimeState",
    "access": "public",
    "description": "Resets values of runtime state items. Note: the list of acceptable items corresponds to runtimeStateItems, which might be extended in future.",
    "lineNumber": 415,
    "since": "v0.82.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "undefined"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "String[]",
          "undefined"
        ],
        "spread": false,
        "optional": true,
        "name": "itemNames",
        "description": "name (or array of names) of runtime state item(s) to reset. If not specified, all available items will be reset."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "runtimeStateItems.CLIENT_DATA",
        "description": "removes all form values client data items"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "runtimeStateItems.CURRENT_SCREEN",
        "description": "resets current screen to first available"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "runtimeStateItems.SCREENS_VISIBILITY",
        "description": "makes all screens visible"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "runtimeStateItems.SCREENS_VALIDITY",
        "description": "resets validity statuses of screens to \"pristine\""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "runtimeStateItems.SOFT_LOCK_STATUS",
        "description": "removes soft lock"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "runtimeStateItems.HARD_LOCK_STATUS",
        "description": "removes hard lock"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "undefined"
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "getFieldByName",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#getFieldByName",
    "access": "public",
    "description": "Retrieves all properties of the field with specified name. This is how you can get the item type, default value and other properties.",
    "examples": [
      "this.coreApi.getFieldByName('myTextBox');"
    ],
    "lineNumber": 447,
    "since": "v0.82.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object | null} found item or null"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the client data item to retrieve"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object ",
        " null"
      ],
      "spread": false,
      "description": "found item or null"
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "getUserDataTypeByName",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#getUserDataTypeByName",
    "access": "public",
    "description": "Retrieves user data item type by its name.",
    "examples": [
      "this.coreApi.getUserDataTypeByName('CompanyID');"
    ],
    "lineNumber": 459,
    "since": "v0.85.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String | undefined} found data item type or undefined"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the user data item to retrieve"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String ",
        " undefined"
      ],
      "spread": false,
      "description": "found data item type or undefined"
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "getStringProductPropertyByName",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#getStringProductPropertyByName",
    "access": "public",
    "description": "Retrieves product property value by its name.",
    "examples": [
      "this.coreApi.getStringProductPropertyByName('CA_for_ViewPDF');"
    ],
    "lineNumber": 471,
    "since": "v0.91.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String | undefined} product property value or defaul value from ProductPropertiesConfig (if property was found). Otherwise - undefined."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the product property to retrieve"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String ",
        " undefined"
      ],
      "spread": false,
      "description": "product property value or defaul value from ProductPropertiesConfig (if property was found). Otherwise - undefined."
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "showLoader",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#showLoader",
    "access": "public",
    "description": "Shows splash screen with spinner. Practical for time-consuming operations.",
    "examples": [
      "this.coreApi.showLoader();\nsetTimeout(this.coreApi.hideLoader, 1000);",
      "this.coreApi.showLoader('myLoader1');\nsetTimeout(this.coreApi.hideLoader, 500);\n\nthis.coreApi.showLoader('myLoader2');\nsetTimeout(this.coreApi.hideLoader, 1200);\n\n// Outcomes: loader will be shown as soon as 1st `showLoader` is called\n// and will be hidden (without blinking) after 1200ms (after latest `hideLoader` is called)"
    ],
    "lineNumber": 499,
    "since": "v0.91.*",
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "loaderId",
        "description": "sometimes you need to show loaders for different purposes\n         simultaneously and hide the loading spinner only after all of the loaders were hidden by calling `hideLoader`.\n         This `loaderId` helps to queue loading operations"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "if not empty shows message under the spinner. Message would not be preserved for next loader (hide -> show)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "hideLoader",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#hideLoader",
    "access": "public",
    "description": "Hides splash screen with spinner.\nNOTE: number of hideLoader calls should equal the number of previous showLoader calls to actually hide a progress screen.",
    "examples": [
      "this.coreApi.showLoader();\nsetTimeout(this.coreApi.hideLoader, 1000);"
    ],
    "lineNumber": 514,
    "since": "v0.91.*",
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "loaderId",
        "description": "sometimes you need to show loaders for different purposes\n         simultaneously and hide the loading spinner only after all of the loaders were hidden by calling `hideLoader`.\n         This `loaderId` helps to queue loading operations"
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "showModal",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#showModal",
    "access": "public",
    "description": "Show modal window on the screen.",
    "examples": [
      "\n// NOTE: When you use plain string with html to show modal window,\n// then this string should contain only a content of the window body.\n// It will be wrapped by ReactBootstrap.Modal component and appear on the screen via react's `dangerouslySetInnerHTML` attribute.\n// This mean that you should care about xss by yourself.\nvar modalContent = ''+\n     '<div class=\"modal-content\" role=\"document\">' +\n          '<div class=\"modal-header\">' +\n             '<button type=\"button\" class=\"close\" aria-label=\"Close\" onclick=\"global.App.runtimeCoreApi.hideModal()\">' +\n                 '<span aria-hidden=\"true\">×</span>' +\n             '</button>' +\n             '<h4 class=\"modal-title\">View PDF in the iframe</h4>' +\n         '</div>' +\n         '<div class=\"modal-body\">' +\n             '<iframe src=\"http://eloquentjavascript.net/Eloquent_JavaScript.pdf\" style=\"border: none; width: 100%; height: 570px;\"></iframe>' +\n         '</div>' +\n         '<div class=\"modal-footer\">' +\n             '<button type=\"button\" class=\"btn btn-default\" onclick=\"global.App.runtimeCoreApi.hideModal()\">' +\n                 'Close' +\n             '</button>' +\n             '<a href=\"http://eloquentjavascript.net/Eloquent_JavaScript.pdf\" download=\"\" class=\"btn btn-primary\" role=\"button\">' +\n                 'Save/Download as PDF' +\n             '</a>' +\n         '</div>' +\n     '</div>' +\n'';\nthis.coreApi.showModal(modalContent);\n\n// or\nvar coreApi = this;\nvar modalWindowComponent = React.createClass({\n     render: function() {\n        return React.createElement(\n             ReactBootstrap.Modal,\n             { animation: false, show: true, onHide: coreApi.hideModal },\n             [\n                 React.createElement(\n                     ReactBootstrap.ModalHeader,\n                     { closeButton: true, key: 'view-pdf-header' },\n                     React.createElement(ReactBootstrap.ModalTitle, null, 'View as PDF')\n                 ),\n                 React.createElement(\n                     ReactBootstrap.ModalBody,\n                     { key: 'view-pdf-body' },\n                     React.createElement('iframe', {\n                         src: 'http://eloquentjavascript.net/Eloquent_JavaScript.pdf',\n                         style: { border: 'none', width: '100%', height: '570px' }\n                     })\n                 ),\n                 React.createElement(ReactBootstrap.ModalFooter, { key: 'view-pdf-footer' }, [\n                     React.createElement(\n                         ReactBootstrap.Button,\n                         { onClick: coreApi.hideModal, key: 'view-pdf-btn-close' },\n                         'Close'\n                     ),\n                     React.createElement(\n                         ReactBootstrap.Button,\n                         {\n                             href: 'http://eloquentjavascript.net/Eloquent_JavaScript.pdf',\n                             download: true,\n                             bsStyle: 'primary',\n                             key: 'view-pdf-btn-save'\n                         },\n                         'Save/Download as PDF'\n                     )\n                 ])\n             ]\n         );\n    }\n});\nthis.coreApi.showModal(modalWindowComponent);"
    ],
    "lineNumber": 594,
    "params": [
      {
        "nullable": null,
        "types": [
          "React.Component ",
          " string"
        ],
        "spread": false,
        "optional": false,
        "name": "modalWindowComponent",
        "description": "React Component or modal window body as html string"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "hideModal",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#hideModal",
    "access": "public",
    "description": "Hide modal window on the screen.",
    "examples": [
      "this.coreApi.hideModal();"
    ],
    "lineNumber": 624,
    "params": [],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "renderUploadFileComponent",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#renderUploadFileComponent",
    "access": "public",
    "description": "Returns upload file container component.",
    "examples": [
      "// example of the response on call getFilesListCallback\n{\n \"files\": [{\n     name: 'filename',\n     id: 1, // id will be used in deleteFileCallback and downloadFileCallback\n     description: 'description',\n     size: 123123,\n     url: 'path to file' // url will be used for file preview\n     }]\n}"
    ],
    "lineNumber": 650,
    "since": "v0.87.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "react component"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "properties for component"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.defaultFileName",
        "description": "default file name from event action"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.maxFileSize",
        "description": "max files size in bytes, default 1000000000"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.allowedFileTypes",
        "description": "array of allowed file types, default ['pdf', 'docx']"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.maxFileNameLength",
        "description": "max filename input length"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "props.maxDescriptionLength",
        "description": "max description input length"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "react component"
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "renderShowAttachmentsComponent",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#renderShowAttachmentsComponent",
    "access": "public",
    "description": "Returns show attachments component.",
    "lineNumber": 686,
    "since": "v0.87.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "react component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "react component"
    },
    "params": []
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "getApiEndpoint",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#getApiEndpoint",
    "access": "public",
    "description": "Returns api endpoint by api method name",
    "lineNumber": 713,
    "since": "v0.87.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} - apiEndpoint"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "apiMethodName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "apiEndpoint"
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "generateIndexHtmlForNested",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#generateIndexHtmlForNested",
    "access": "public",
    "description": "Prepare index html for the nested application.",
    "lineNumber": 729,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "versionRef",
        "description": "version id of nested application;"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "appStaticPath",
        "description": "root path of host application;"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "configs",
        "description": "object with following application configs: `appConfig`, `apiConfig`, `queryVariables`, `uiConfig`;"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "nestedAppScript",
        "description": "customization script that can be provided to do some work when nested app is loaded;"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": "a promise of the index html to be built."
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "convertSmartyStreetsPredictions",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#convertSmartyStreetsPredictions",
    "access": "public",
    "description": "Converts Smarty Streets predictions.",
    "examples": [
      "this.coreApi.convertSmartyStreetsPredictions({\n     suggestions: [\n         {\n             city: 'Sandy',\n             state: 'UT',\n             street_line: '1 S 865 E',\n             text: '1 S 865 E, Sandy UT'\n         },\n         {\n             city: 'Munson',\n             state: 'PA',\n             street_line: '1 N 9th St',\n             text: '1 N 9th St, Munson PA'\n         }\n     ]\n});"
    ],
    "lineNumber": 789,
    "since": "v0.91.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - converted Smarty Streets predictions\nExample of output data:\n[\n  {\n    name: '1 S 865 E, Sandy UT',\n    id: '1 S 865 E, Sandy UT',\n    data: {\n         street: '1 S 865 E',\n         city: 'Sandy',\n         state: 'UT'\n    }\n  },\n  {\n    name: '1 N 9th St, Munson PA',\n    id: '1 N 9th St, Munson PA',\n    data: {\n         street: '1 N 9th St',\n         city: 'Munson',\n         state: 'PA'\n    }\n  }\n]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "predictions",
        "description": "Smarty Streets predictions (https://smartystreets.com/docs/cloud/us-autocomplete-api)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "converted Smarty Streets predictions\nExample of output data:\n[\n  {\n    name: '1 S 865 E, Sandy UT',\n    id: '1 S 865 E, Sandy UT',\n    data: {\n         street: '1 S 865 E',\n         city: 'Sandy',\n         state: 'UT'\n    }\n  },\n  {\n    name: '1 N 9th St, Munson PA',\n    id: '1 N 9th St, Munson PA',\n    data: {\n         street: '1 N 9th St',\n         city: 'Munson',\n         state: 'PA'\n    }\n  }\n]"
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "convertGooglePlacesPredictions",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#convertGooglePlacesPredictions",
    "access": "public",
    "description": "Converts Google Places predictions.",
    "examples": [
      "this.coreApi.convertGooglePlacesPredictions([\n    {\n        description: 'Santa Fe 1212, Rosario, Santa Fe Province, Argentina',\n        id: '39ea0fe03f10e0a6f6191ba6019e798e5afb6d7f',\n        place_id: 'ChIJp_CTIhirt5URQA_cG8AtSbM',\n        ...\n    },\n    {\n        description: '1085-1087 Boylston Street, Boston, MA, USA',\n        id: '1ae260ae026bc6f447136e7b98a30bc68fb99fbc',\n        place_id: 'ChIJjcKMJBt644kRVXqk_329y6o',\n        ...\n    }\n]);"
    ],
    "lineNumber": 831,
    "since": "v0.91.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - converted Google Places predictions\nExample of output data:\n[\n  {\n    name: 'Santa Fe 1212, Rosario, Santa Fe Province, Argentina',\n    id: 'Santa Fe 1212, Rosario, Santa Fe Province, Argentina',\n    data: {\n         placeId: 'ChIJp_CTIhirt5URQA_cG8AtSbM'\n    }\n  },\n  {\n    name: '1085-1087 Boylston Street, Boston, MA, USA',\n    id: '1085-1087 Boylston Street, Boston, MA, USA',\n    data: {\n         placeId: 'ChIJjcKMJBt644kRVXqk_329y6o'\n    }\n  }\n]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "predictions",
        "description": "Google Places predictions (https://developers.google.com/places/web-service/autocomplete#place_autocomplete_results)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "converted Google Places predictions\nExample of output data:\n[\n  {\n    name: 'Santa Fe 1212, Rosario, Santa Fe Province, Argentina',\n    id: 'Santa Fe 1212, Rosario, Santa Fe Province, Argentina',\n    data: {\n         placeId: 'ChIJp_CTIhirt5URQA_cG8AtSbM'\n    }\n  },\n  {\n    name: '1085-1087 Boylston Street, Boston, MA, USA',\n    id: '1085-1087 Boylston Street, Boston, MA, USA',\n    data: {\n         placeId: 'ChIJjcKMJBt644kRVXqk_329y6o'\n    }\n  }\n]"
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "parseSmartyStreetsAddress",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#parseSmartyStreetsAddress",
    "access": "public",
    "description": "Parses Smarty Streets address details.",
    "examples": [
      "this.coreApi.parseSmartyStreetsAddress([\n     {\n         components: {\n             city_name: 'Blue Ridge'\n             street_name: 'Vellenorth',\n             zipcode: '30513',\n             plus4_code: '2813',\n             ...\n         },\n         ...\n     }\n]);"
    ],
    "lineNumber": 867,
    "since": "v0.91.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - parsed Smarty Streets address details"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "addressDetails",
        "description": "Smarty Streets address details (https://smartystreets.com/docs/cloud/us-street-api)"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "country",
        "description": "country"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "city",
        "description": "city"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "state"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "address"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "zip",
        "description": "zip code\nExample of output data:\n{\n   address: \"222 Vellenorth Rd\",\n   city: \"Blue Ridge\",\n   country: \"US\",\n   state: \"GA\",\n   zip: \"30513-2813\"\n}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed Smarty Streets address details"
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "parseGooglePlacesAddress",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#parseGooglePlacesAddress",
    "access": "public",
    "description": "Parses Google Places address details.",
    "examples": [
      "this.coreApi.parseGooglePlacesAddress({\n     address_components: [\n         {\n             long_name: '1085-1087',\n             short_name: '1085-1087',\n             types: [ 'street_number' ]\n         },\n         {\n             long_name: 'Boylston Street',\n             short_name: 'Boylston St',\n             types: [ 'route' ]\n         },\n         ...\n     ],\n     ...\n});"
    ],
    "lineNumber": 907,
    "since": "v0.91.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - parsed Google Places address details"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "addressDetails",
        "description": "Google Places address details (https://developers.google.com/places/web-service/details#PlaceDetailsResults)"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "country",
        "description": "country"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "city",
        "description": "city"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "state"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "address"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "zip",
        "description": "zip code\nExample of output data:\n{\n   address: \"1085-1087 Boylston Street\",\n   city: \"Boston\",\n   country: \"USA\",\n   state: \"MA\",\n   zip: \"02215\"\n}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "parsed Google Places address details"
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "getDestiny",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#getDestiny",
    "access": "public",
    "description": "Get application destiny",
    "lineNumber": 915,
    "return": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": "application destiny value `application`, `clickwrap` or null;"
    },
    "params": []
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "openNextVisibleScreen",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#openNextVisibleScreen",
    "access": "public",
    "description": "Finds next visible screen, opens it and then waits asynchronously until it's open,\nas changing screen triggers events which could have asynchronous effects (beforeloadscreen, beforeleavescreen, etc...).\nA screen is considered open when it's fully rendered and waits for user interaction.\nIn other words after screen is rendered nothing should be changed by application itself (for example field validation change) until user interacts with the screen.",
    "lineNumber": 928,
    "since": "v0.106.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>} - true, in case of next visible screen found and opened,\n false - in case of current screen is last visible or next visible screen wasn't opened"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "true, in case of next visible screen found and opened,\n false - in case of current screen is last visible or next visible screen wasn't opened"
    },
    "params": []
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "openScreenByName",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#openScreenByName",
    "access": "public",
    "description": "Opens screen and waits asynchronously until it's open,\nas changing screen triggers events which could have asynchronous effects (beforeloadscreen, beforeleavescreen, etc...).\nA screen is considered open when it's fully rendered and waits for user interaction.\nIn other words after screen is rendered nothing should be changed by application itself (for example field validation change) until user interacts with the screen.",
    "lineNumber": 945,
    "since": "v0.106.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>} - true, in case of screen found and opened,\n false - in case of screen wasn't opened"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "screenName",
        "description": "name of screen to open"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "true, in case of screen found and opened,\n false - in case of screen wasn't opened"
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "openFirstIncompleteScreen",
    "memberof": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI#openFirstIncompleteScreen",
    "access": "public",
    "description": "Opens first incomplete screen and waits asynchronously until it's open,\nas changing screen triggers events which could have asynchronous effects (beforeloadscreen, beforeleavescreen, etc...).\nA screen is considered open when it's fully rendered and waits for user interaction.\nIn other words after screen is rendered nothing should be changed by application itself (for example field validation change) until user interacts with the screen.",
    "lineNumber": 969,
    "since": "v0.106.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<boolean>} - true, in case of first incomplete screen found and opened,\n false - in case of current screen is first incomplete screen wasn't opened"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<boolean>"
      ],
      "spread": false,
      "description": "true, in case of first incomplete screen found and opened,\n false - in case of current screen is first incomplete screen wasn't opened"
    },
    "params": []
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "runtimeCoreApiInstance",
    "memberof": "sdk/RuntimeCoreAPI.js",
    "static": true,
    "longname": "sdk/RuntimeCoreAPI.js~runtimeCoreApiInstance",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/RuntimeCoreAPI.js",
    "importStyle": "{runtimeCoreApiInstance}",
    "description": null,
    "lineNumber": 985,
    "undocument": true,
    "type": {
      "types": [
        "sdk/RuntimeCoreAPI.js~RuntimeCoreAPI"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "switchToScreenAndWaitWhileItWaitsForUserInput",
    "memberof": "sdk/RuntimeCoreAPI.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "sdk/RuntimeCoreAPI.js~switchToScreenAndWaitWhileItWaitsForUserInput",
    "access": "public",
    "export": false,
    "importPath": "ipln-scrd/sdk/RuntimeCoreAPI.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 987,
    "undocument": true,
    "params": [
      {
        "name": "screenOpenerFn",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "sdk/SDKEventHandlerNames.js",
    "content": "// These constants should correspond to methods exported in GlobalEventHandlers class\n// WARNING: using these constants in methods' names, like [SAVE_DATA](){} won't work for esdoc - documentation will have incorrect names\n\nconst SEND_EMAIL = 'sendEmail';\nconst APPLY_ESIGN = 'applyEsign';\nconst DECLINE_ESIGN = 'declineEsign';\nconst ACTIVATE_FORM_PACKAGE = 'activateFormPackage';\nconst EXPORT_FORM_FROM_IGO = 'exportFormFromIGO'; // This event is deprecated and will be remove in nearest time.\nconst VIEW_PDF = 'viewPDF';\nconst CALL_CUSTOM_ASSEMBLY = 'callCustomAssembly';\nconst CALL_JS_CUSTOM_ASSEMBLY = 'callJsCustomAssembly';\nconst CALL_SERVER_PROCEDURE = 'callServerProcedure';\nconst GET_SOURCEGRID_DATA = 'getSourceGridData';\nconst GET_SOURCEDROPDOWN_DATA = 'getSourceDropdownData';\nconst SAVE_DATA = 'saveData';\nconst LOAD_DATA = 'loadData';\nconst INITIAL_LOAD_DATA = 'initialLoadData';\nconst VALIDATE_CREDIT_CARD = 'validateCreditCard';\nconst VERIFY_EMAIL = 'verifyEmail';\nconst CHANGE_CREDIT_CARD = 'changeCreditCard';\nconst CALL_LOGGER = 'callLogger';\nconst CREATE_AIS_CASE = 'createAISCase';\nconst OPEN_AIS_CASE = 'openAISCase';\nconst UNDERWRITE_AIS_CASE = 'underwriteAISCase';\nconst GET_SMARTY_STREETS_PREDICTIONS = 'getSmartyStreetsPredictions';\nconst GET_GOOGLE_PLACES_PREDICTIONS = 'getGooglePlacesPredictions';\nconst GET_SMARTY_STREETS_DETAILS = 'getSmartyStreetsDetails';\nconst GET_GOOGLE_PLACES_DETAILS = 'getGooglePlacesDetails';\nconst RETRIEVE_PARAMED_SCHEDULER_URL = 'retrieveParamedSchedulerUrl';\nconst CHECK_PARAMED_SCHEDULER_STATUS = 'checkParamedSchedulerStatus';\nconst UPLOAD_FILE = 'uploadFile';\nconst SHOW_ATTACHMENTS = 'showAttachments';\n\nexport {\n    SEND_EMAIL,\n    APPLY_ESIGN,\n    DECLINE_ESIGN,\n    ACTIVATE_FORM_PACKAGE,\n    EXPORT_FORM_FROM_IGO,\n    VIEW_PDF,\n    CALL_CUSTOM_ASSEMBLY,\n    CALL_JS_CUSTOM_ASSEMBLY,\n    CALL_SERVER_PROCEDURE,\n    GET_SOURCEGRID_DATA,\n    GET_SOURCEDROPDOWN_DATA,\n    SAVE_DATA,\n    LOAD_DATA,\n    INITIAL_LOAD_DATA,\n    VALIDATE_CREDIT_CARD,\n    VERIFY_EMAIL,\n    CHANGE_CREDIT_CARD,\n    CALL_LOGGER,\n    CREATE_AIS_CASE,\n    OPEN_AIS_CASE,\n    UNDERWRITE_AIS_CASE,\n    UPLOAD_FILE,\n    SHOW_ATTACHMENTS,\n    GET_SMARTY_STREETS_PREDICTIONS,\n    GET_GOOGLE_PLACES_PREDICTIONS,\n    GET_SMARTY_STREETS_DETAILS,\n    GET_GOOGLE_PLACES_DETAILS,\n    RETRIEVE_PARAMED_SCHEDULER_URL,\n    CHECK_PARAMED_SCHEDULER_STATUS\n};\n",
    "static": true,
    "longname": "/var/lib/jenkins/workspace/Screen Designer/NGEN - Screen Designer/ngen_screen_designer-0.107.5/src/runtime/sdk/SDKEventHandlerNames.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "SEND_EMAIL",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~SEND_EMAIL",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{SEND_EMAIL}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "APPLY_ESIGN",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~APPLY_ESIGN",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{APPLY_ESIGN}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "DECLINE_ESIGN",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~DECLINE_ESIGN",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{DECLINE_ESIGN}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "ACTIVATE_FORM_PACKAGE",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~ACTIVATE_FORM_PACKAGE",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{ACTIVATE_FORM_PACKAGE}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "EXPORT_FORM_FROM_IGO",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~EXPORT_FORM_FROM_IGO",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{EXPORT_FORM_FROM_IGO}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "VIEW_PDF",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~VIEW_PDF",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{VIEW_PDF}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "CALL_CUSTOM_ASSEMBLY",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~CALL_CUSTOM_ASSEMBLY",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{CALL_CUSTOM_ASSEMBLY}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "CALL_JS_CUSTOM_ASSEMBLY",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~CALL_JS_CUSTOM_ASSEMBLY",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{CALL_JS_CUSTOM_ASSEMBLY}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "CALL_SERVER_PROCEDURE",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~CALL_SERVER_PROCEDURE",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{CALL_SERVER_PROCEDURE}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "GET_SOURCEGRID_DATA",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~GET_SOURCEGRID_DATA",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{GET_SOURCEGRID_DATA}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "GET_SOURCEDROPDOWN_DATA",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~GET_SOURCEDROPDOWN_DATA",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{GET_SOURCEDROPDOWN_DATA}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "name": "SAVE_DATA",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~SAVE_DATA",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{SAVE_DATA}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "LOAD_DATA",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~LOAD_DATA",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{LOAD_DATA}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "INITIAL_LOAD_DATA",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~INITIAL_LOAD_DATA",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{INITIAL_LOAD_DATA}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "VALIDATE_CREDIT_CARD",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~VALIDATE_CREDIT_CARD",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{VALIDATE_CREDIT_CARD}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "VERIFY_EMAIL",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~VERIFY_EMAIL",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{VERIFY_EMAIL}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "CHANGE_CREDIT_CARD",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~CHANGE_CREDIT_CARD",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{CHANGE_CREDIT_CARD}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "CALL_LOGGER",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~CALL_LOGGER",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{CALL_LOGGER}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "CREATE_AIS_CASE",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~CREATE_AIS_CASE",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{CREATE_AIS_CASE}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "OPEN_AIS_CASE",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~OPEN_AIS_CASE",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{OPEN_AIS_CASE}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "UNDERWRITE_AIS_CASE",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~UNDERWRITE_AIS_CASE",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{UNDERWRITE_AIS_CASE}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "UPLOAD_FILE",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~UPLOAD_FILE",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{UPLOAD_FILE}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "SHOW_ATTACHMENTS",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~SHOW_ATTACHMENTS",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{SHOW_ATTACHMENTS}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "GET_SMARTY_STREETS_PREDICTIONS",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~GET_SMARTY_STREETS_PREDICTIONS",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{GET_SMARTY_STREETS_PREDICTIONS}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "GET_GOOGLE_PLACES_PREDICTIONS",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~GET_GOOGLE_PLACES_PREDICTIONS",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{GET_GOOGLE_PLACES_PREDICTIONS}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "GET_SMARTY_STREETS_DETAILS",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~GET_SMARTY_STREETS_DETAILS",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{GET_SMARTY_STREETS_DETAILS}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "GET_GOOGLE_PLACES_DETAILS",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~GET_GOOGLE_PLACES_DETAILS",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{GET_GOOGLE_PLACES_DETAILS}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "RETRIEVE_PARAMED_SCHEDULER_URL",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~RETRIEVE_PARAMED_SCHEDULER_URL",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{RETRIEVE_PARAMED_SCHEDULER_URL}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "CHECK_PARAMED_SCHEDULER_STATUS",
    "memberof": "sdk/SDKEventHandlerNames.js",
    "static": true,
    "longname": "sdk/SDKEventHandlerNames.js~CHECK_PARAMED_SCHEDULER_STATUS",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SDKEventHandlerNames.js",
    "importStyle": "{CHECK_PARAMED_SCHEDULER_STATUS}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "sdk/SharedGlobalEventHandlers.js",
    "content": "import _ from 'lodash';\nimport logger from 'runtime/../../logger';\nimport makeNestedAppModalComponent from 'runtime/nested/makeModalComponent.react';\nimport { PACKAGE_GUID_KEY, SIGNER_GUID_KEY } from 'runtime/nested/esigui/constants/globalKeys';\nimport composeEsigUIAppConfigs from 'runtime/nested/esigui/utils/composeAppConfigs';\nimport mapHostClientDataToNested from 'runtime/nested/esigui/utils/mapHostClientDataToNested';\nimport injectGlobalData from 'runtime/nested/esigui/utils/injectGlobalData';\nimport getApplicationStaticPath from 'runtime/nested/utils/getApplicationStaticPath';\nimport * as pom from 'runtime/constants/MessageTypes';\nimport postMessageHelper from 'runtime/utils/postMessageHelper';\nimport { CLICKWRAP } from 'shared/constants/ScreenDestinations';\nimport getClientDataMapping from 'runtime/nested/esigui/utils/getClientDataMapping';\nimport { SHOULD_AUTOMATICALLY_VALIDATE } from 'runtime/constants/ClientDataFieldNames';\n\nconst isClickwrapDestiny = destiny => destiny === CLICKWRAP;\n\nconst specialClientDataMapping = {\n    ESIG_packageGuid: PACKAGE_GUID_KEY,\n    ESIG_signerGuid: SIGNER_GUID_KEY\n};\n\n/**\n * Shared SDK class. Added as a mixin to globally available SDK.\n */\nexport class SharedGlobalEventHandlers {\n    /**\n     * This method is invoked whenever Runtime attempts to open eSigUI.\n     * @since v0.89.*\n     * @param {string} versionRef - id of the version which represents the nested application\n     */\n    async ESIGUI_startSigning(versionRef) {\n        postMessageHelper.sendMessageToParent({\n            type: pom.START_ESIG_UI\n        });\n\n        const { clientData } = this.coreApi.getRuntimeState(\n            this.coreApi.runtimeStateItems.CLIENT_DATA\n        );\n\n        const clientDataMapping = getClientDataMapping(versionRef);\n\n        const eSigUiCaseData = mapHostClientDataToNested(clientData, clientDataMapping);\n\n        const eSigServiceSpecificData = mapHostClientDataToNested(\n            clientData,\n            specialClientDataMapping\n        );\n        const esigServiceSpecificDataReadyToBeInjected = {\n            ..._.mapValues(eSigServiceSpecificData, 'value')\n        };\n\n        const nestedAppScript = injectGlobalData(\n            esigServiceSpecificDataReadyToBeInjected,\n            eSigUiCaseData\n        );\n\n        const configs = composeEsigUIAppConfigs();\n\n        const appStaticPath = getApplicationStaticPath();\n\n        const indexHtml = await this.coreApi.generateIndexHtmlForNested(\n            versionRef,\n            appStaticPath,\n            configs,\n            nestedAppScript\n        );\n\n        const destiny = this.coreApi.getDestiny();\n\n        const modalSettings = {\n            animation: !isClickwrapDestiny(destiny),\n            styles: {\n                'nested-app__modal_fullscreen': isClickwrapDestiny(destiny)\n            }\n        };\n\n        this.coreApi.showModal(makeNestedAppModalComponent(indexHtml, modalSettings));\n    }\n\n    /**\n     * This method is invoked when nested application attempts to close eSigUI.\n     * @since v0.92.*\n     */\n    async closeEsigUiApp() {\n        postMessageHelper.sendMessageToParent({\n            type: pom.FINISH_ESIG_UI\n        });\n\n        await this.loadData();\n\n        this.coreApi.hideModal();\n    }\n\n    /**\n     * Decides whether auto validation should start.\n     * By default it looks if specific flag in client data is setup and case is not hard locked\n     * @since v0.106.*\n     * @returns {Boolean} - true, if auto validation should start, false if it isn't\n     */\n    needToAutoValidateScreens() {\n        const skeys = this.coreApi.runtimeStateItems;\n        const rs = this.coreApi.getRuntimeState([skeys.CLIENT_DATA, skeys.HARD_LOCK_STATUS]);\n        const clientData = rs[skeys.CLIENT_DATA];\n        const caseIsNotHardLocked = _.toString(rs[skeys.HARD_LOCK_STATUS]) !== 'true';\n\n        const shouldAutomaticallyValidate = _.get(\n            clientData,\n            `${SHOULD_AUTOMATICALLY_VALIDATE}.value`,\n            false\n        );\n\n        return _.toString(shouldAutomaticallyValidate) === 'true' && caseIsNotHardLocked;\n    }\n\n    /**\n     * Starts auto validation of screens. Screens are open one by one in sequence automatically until last visible screen.\n     * Auto validation starts from currently opened screen.\n     * @since v0.106.*\n     * @returns {Promise} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.autoValidateScreens.\n     * If implementation is synchronous you may return either resolved Promise or undefined.\n     */\n    async autoValidateScreens() {\n        // Up to here state is restored from client data, 1st visible screen must be open and application waits for user input\n        if (!this.needToAutoValidateScreens()) return false;\n\n        const loaderId = 'autoValidateScreens';\n        this.coreApi.showLoader(loaderId, 'Auto validation is in progress');\n\n        // loader isn't showing if not waiting some time.\n        await new Promise(r => setTimeout(r, 0));\n\n        try {\n            // open next visible screen until the latter\n            while (await this.coreApi.openNextVisibleScreen()) {\n                // Give some time to react to finish batch render update and, at the same time, prevent screens blinking too frequently\n                await new Promise(r => setTimeout(r, 20));\n            }\n\n            // direct user to the first invalid screen\n            await this.coreApi.openFirstIncompleteScreen();\n\n            // remove from state flag `SHOULD_AUTOMATICALLY_VALIDATE`\n            this.coreApi.updateRuntimeState({\n                [this.coreApi.runtimeStateItems.CLIENT_DATA]: {\n                    [SHOULD_AUTOMATICALLY_VALIDATE]: { value: '', formattedValue: '' }\n                }\n            });\n\n            // send request to save client data\n            await this.saveData();\n        } catch (e) {\n            logger.runtime.autoValidate.error(e);\n        }\n\n        this.coreApi.hideLoader(loaderId);\n    }\n}\n",
    "static": true,
    "longname": "/var/lib/jenkins/workspace/Screen Designer/NGEN - Screen Designer/ngen_screen_designer-0.107.5/src/runtime/sdk/SharedGlobalEventHandlers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "isClickwrapDestiny",
    "memberof": "sdk/SharedGlobalEventHandlers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "sdk/SharedGlobalEventHandlers.js~isClickwrapDestiny",
    "access": "public",
    "export": false,
    "importPath": "ipln-scrd/sdk/SharedGlobalEventHandlers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "destiny",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "specialClientDataMapping",
    "memberof": "sdk/SharedGlobalEventHandlers.js",
    "static": true,
    "longname": "sdk/SharedGlobalEventHandlers.js~specialClientDataMapping",
    "access": "public",
    "export": false,
    "importPath": "ipln-scrd/sdk/SharedGlobalEventHandlers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{\"ESIG_packageGuid\": *, \"ESIG_signerGuid\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "class",
    "name": "SharedGlobalEventHandlers",
    "memberof": "sdk/SharedGlobalEventHandlers.js",
    "static": true,
    "longname": "sdk/SharedGlobalEventHandlers.js~SharedGlobalEventHandlers",
    "access": "public",
    "export": true,
    "importPath": "ipln-scrd/sdk/SharedGlobalEventHandlers.js",
    "importStyle": "{SharedGlobalEventHandlers}",
    "description": "Shared SDK class. Added as a mixin to globally available SDK.",
    "lineNumber": 25,
    "interface": false
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "ESIGUI_startSigning",
    "memberof": "sdk/SharedGlobalEventHandlers.js~SharedGlobalEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/SharedGlobalEventHandlers.js~SharedGlobalEventHandlers#ESIGUI_startSigning",
    "access": "public",
    "description": "This method is invoked whenever Runtime attempts to open eSigUI.",
    "lineNumber": 31,
    "since": "v0.89.*",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "versionRef",
        "description": "id of the version which represents the nested application"
      }
    ],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "closeEsigUiApp",
    "memberof": "sdk/SharedGlobalEventHandlers.js~SharedGlobalEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/SharedGlobalEventHandlers.js~SharedGlobalEventHandlers#closeEsigUiApp",
    "access": "public",
    "description": "This method is invoked when nested application attempts to close eSigUI.",
    "lineNumber": 84,
    "since": "v0.92.*",
    "params": [],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "needToAutoValidateScreens",
    "memberof": "sdk/SharedGlobalEventHandlers.js~SharedGlobalEventHandlers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "sdk/SharedGlobalEventHandlers.js~SharedGlobalEventHandlers#needToAutoValidateScreens",
    "access": "public",
    "description": "Decides whether auto validation should start.\nBy default it looks if specific flag in client data is setup and case is not hard locked",
    "lineNumber": 100,
    "since": "v0.106.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} - true, if auto validation should start, false if it isn't"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true, if auto validation should start, false if it isn't"
    },
    "params": []
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "autoValidateScreens",
    "memberof": "sdk/SharedGlobalEventHandlers.js~SharedGlobalEventHandlers",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "sdk/SharedGlobalEventHandlers.js~SharedGlobalEventHandlers#autoValidateScreens",
    "access": "public",
    "description": "Starts auto validation of screens. Screens are open one by one in sequence automatically until last visible screen.\nAuto validation starts from currently opened screen.",
    "lineNumber": 122,
    "since": "v0.106.*",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.autoValidateScreens.\nIf implementation is synchronous you may return either resolved Promise or undefined."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A Promise of operation completion if implementation contains any asynchronous operations and/or call to superclass.autoValidateScreens.\nIf implementation is synchronous you may return either resolved Promise or undefined."
    },
    "params": []
  },
  {
    "kind": "index",
    "content": "# Screen Designer\n\n![CircleCI](https://circleci.com/gh/ipipeline/ngen_screen_designer.svg?style=shield&circle-token=2813862441f6983321d184318d7b5b4b5c66902c)\n[![codecov](https://codecov.io/gh/ipipeline/ngen_screen_designer/branch/dev/graph/badge.svg?token=NQORvHqHIM)](https://codecov.io/gh/ipipeline/ngen_screen_designer)\n\n### Build the project\n\n* install nodejs of 10.\\* version (10.11.0 LTS) [Node.js](http://nodejs.org/)\n* install mongodb v3.6 [MongoDB](http://www.mongodb.org/downloads)\n* on Windows install build toolchain as described in https://github.com/nodejs/node-gyp#on-windows\n* `npm install` for installing modules (if you see any errors then refer to section\n  [Newrelic](#newrelic-for-development))\n* `npm run serve` for running server\n* `npm run build` for running build\n\n### Run development environment\n\n* `npm run dev` (or `npm run dev-plain` to build without source maps which will be faster) for\n  running project in development mode (app is available on http://localhost:3000/)\n\n### Code Style Guide\n\n* [JavaScript CodeStyle by airbnb](https://github.com/airbnb/javascript/blob/master/README.md)\n* [Prettier](https://prettier.io/docs/en/index.html) code formatter is used to automatically format\n  you code on commit\n* `npm run lint` to lint code\n\n### Technology requirements\n\n* **Instead of** `Immutable.js` use `fast.js`, you can find it in `src/utils/fast.js`\n\n### Configs\n\n* .editorconfig - IDE config\n* .eslintrc.js - Linting config\n* .prettierrc - Prettier config\n* .babelrc - Babel config\n\n### Running tests\n\n* `npm run unit-tests` (for running unit tests, \\*.spec.js)\n* `npm run e2e` (for running end-to-end tests on database, API tests, \\*.e2e.js)\n* `npm run ui-tests` (running UI tests, testing react components, \\*-test.js)\n\n#### Testing strategy (which functionality should be covered by which tests)\n\nWe have 3 types of tests which aimed to test different areas of application. Here is what should be\ntested in every test type.\n\n_UI:_ <br> Every runtime component with internal business logic should have at least 80% percent\ncoverage of business logic and arbitrary coverage for rendering logic. Snapshot testing should help\nhere much. Consider https://jestjs.io/docs/en/snapshot-testing\n\n_UNIT:_ <br> All related to runtime business logic should have at least 80% coverage. All units with\ncomplex business logic allover application should have at least 70% coverage.\n\n_API:_ <br> All complex business logic should have at least 70% coverage with \\*.e2e tests. For\nexample, templates business logic should have at least 70% coverage.\n\n### Initialize DB\n\n* `npm run add-db`\n\n### Applying patch on DB\n\n* `npm run db-patch <patch name>`\n\n### Install a new module\n\n* `npm install <aNewModule> --save` (or --save-dev for development needs modules)\n\n### Branching model\n\nFollow [GIT Flow](http://nvie.com/posts/a-successful-git-branching-model/) to create and work with\nbranches. Create a branch from `dev`, check it out, do your work. Branch name should be in format:\n`[user story number]-[short description]`. Use `-` for separating. Example:\n`NGSD-2288-update-readme`.\n\n### Before merge\n\n* See [checklist](https://kb.epam.com/display/IPLNSCRD/Code+review)\n* Check that tests and linter is OK on CI\n* If everything is OK - create pull request (PR)\n* Discuss and fix comments from your colleagues\n* Wait until PR is approved\n\n### Git commit message style\n\nYour commit message should contain:\n\n1. User story number from JIRA: e.g. `NGSD-2288`;\n2. `<type>` of your changes: feature/fix/refactor etc.\n3. Description what you have done.\n4. (Optional) You may add more descriptive commit message. Separate you main short commit message\n   and Description by empty line.\n\nAllowed `<type>` values:\n\n* feat (new feature)\n* fix (bug fix)\n* docs (changes to documentation)\n* style (formatting, missing semi colons, etc; no code change)\n* refactor (refactoring production code)\n* test (adding missing tests, refactoring tests; no production code change)\n* chore (updating grunt tasks etc; no production code change)\n\n### Example of Ideal Commit message\n\nNGSD-2288 docs: Fixed 'git commit message style' section.\n\nReplace outdated information about karma commit style. Added missing information in 'installation'\nsection.\n\n### Version control\n\n* used semantic version\n* CI doing version update in dev for each new build by command `npm version --no-git-tag-version\n  patch`\n* CI doing version update in dev-weekly for each new sprint by command `npm version\n  --no-git-tag-version minor`\n\n### ES6 features\n\n* [view es6](https://github.com/lukehoban/es6features)\n* [view es7](https://h3manth.com/new/blog/2015/es7-features/)\n\n### IDE\n\nYou can use any IDE you like if it is free or you have licence\n\n### Atom plugins\n\n* **atom-ternjs** JavaScript code intelligence for atom with tern.js and autocomplete-plus\n* **editorconfig** Helps developers maintain consistent coding styles between different editors\n* **highlight-selected** Highlights the current word selected when double clicking\n* **linter** A Base Linter with Cow Powers\n* **linter-eslint** ESLint plugin for Atom Linter\n* **language-babel** Babel JavaScript ES201x, React JSX & Flow Grammar & Transpiler\n* **language-sass** Adds syntax highlighting and snippets to Sass/SCSS files in Atom\n\n### Sublime plugins\n\n* Linter plugin [SublimeLinter](https://packagecontrol.io/packages/SublimeLinter-jscs)\n\n### WebStorm settings\n\n### Newrelic for production\n\nYou can configure license key and anything else in `newrelic.js` at root of project directory. Be\naware that by default this file contains development license key and you are obliged to change it\nfor production (property `license_key`). Also it's good to change `app_name`.\n\n### Newrelic for development\n\nIf you see error when running `npm i` related to inability to compile newrelic package try the\nfollowing:\n\n1. Run `npm install --global windows-build-tools`\n2. Run `npm rebuild node-gyp`\n3. Run `npm config set msvs_version 2017`\n4. Run `npm i`\n5. If previous 4 steps didn't help, install python v2.\\* from('https://www.python.org/downloads/')\n   and repeat steps 1-4.\n6. If nothing helps try installing\n   `https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=15` as\n   explained here: `https://github.com/nodejs/node-gyp/issues/1144#issuecomment-290253041`\n",
    "longname": "/var/lib/jenkins/workspace/Screen Designer/NGEN - Screen Designer/ngen_screen_designer-0.107.5/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# SDK Description\n\nSDK allows to override/extend the following actions performed by SD Runtime:\n\n* _saveData_ - invoked when Runtime wants to save client data on server;\n* _loadData_ - invoked when Runtime wants to load client data from server asynchronously;\n* _callCustomAssembly_ - invoked when Runtime calls a 3rd party service to perform calculations or\n  retrieve some data;\n* _callJsCustomAssembly_ - invoked when Runtime calls a custom javascript service to execute any\n  custom logic;\n* _getSourceGridData_ - invoked when Runtime requests data for a specific Source Grid control;\n* _getSourceDropdownData_ - invoked when Runtime requests data for a specific Source Dropdown\n  control;\n* _validateCreditCard_ - invoked to validate credit card data via specific services;\n* _changeCreditCard_ - invoked to erase previously entered credit card data;\n* _verifyEmail_ - invoked whenever email control makes a call to validate email;\n* _viewPDF_ - invoked whenever event action \"View PDF\" happened. This handler executes\n  `RuntimeCoreAPI.showModal` method and pass there a component with pdf iframe inside. You could\n  override this handler and show your own modal window components;\n* _uploadFile_ - invoked whenever Runtime attempts to upload file;\n* _showAttachments_ - invoked whenever Runtime attempts to show attachments.\n\nNames of available actions are defined in the API constant\n`global.App.runtimeCoreApi.sdkEventHandlerNames`. Detailed documentation of SDK actions is available\nin `GlobalEventHandlers` section of this guide.\n\n# Usage\n\nSDK provides a JavaScript API to override/extend specified actions, access Runtime data, call 3rd\nparty services, transform data, etc.\n\nSDK API is available via global JS function `createGlobalEventHandlersExtension(ExtensionClass)`.\nThe function is called by runtime upon its initialization and supplies the `ExtensionClass`\nparameter, which can be used to access/override implementation of SDK actions.\n\nThe `createGlobalEventHandlersExtension` function **must be declared before the `runtime-xxx.js`\nscript**.\n\nExample: The \"scripts.html\" file inside \"application\" folder of the downloaded runtime could be\nmodified in a way:\n\n```html\n<!-- Load custom script first -->\n<script>\n    function createGlobalEventHandlersExtension(ExtensionClass) {\n        // your code here\n    }\n</script>\n\n<!-- External libraries  -->\n<script src=\"{{staticsPath}}/assets/jquery-3.3.1.min.js\" defer></script>\n<script src=\"{{staticsPath}}/assets/bootstrap-3.3.7.min.js\" defer></script>\n\n<!-- Then load runtime.js -->\n<script src=\"{{staticsPath}}/assets/runtime.js\" defer></script>\n```\n\n## External libraries\n\nIf there is necessity in external libraries load them in `scripts.html`. By default it contains\n`jquery-3.3.1.min.js` and `bootstrap-3.3.7.min.js`. Replace these links if you need another versions\nof libraries, but note that `runtime.js` is tested with `2.1.3` and `3.3.1` versions of `jQuery` and\n`3.3.7` of `bootstrap`. Using other versions is possible but stable work is not guaranteed. Remember\nthat `runtime.js` doesn't work without `jQuery` and `bootstrap`.\n\nIn global scope available next libraries:\n\n* React v15.1.0 https://github.com/facebook/react/tree/v15.0.1/docs\n* ReactBootstrap v0.28.5 https://github.com/react-bootstrap/react-bootstrap/tree/v0.28.5/docs\n\n```html\n<!-- Examples -->\n<script>\n    function createGlobalEventHandlersExtension(ExtensionClass) {\n        React.createElement(ReactBootstrap.Modal,\n        {\n            autoFocus: true,\n            animation: false,\n            show: true,\n            backdrop: 'static',\n            onHide: hideModal,\n            bsSize: 'large'\n        })\n    }\n</script>\n```\n\n## Default implementation\n\nIn order to keep default implementation of any action just don't override corresponding SDK action\nor even don't implement the `createGlovalEventHandlersExtension` function. <br> By default all\nmethods inside ExtensionClass don't update UI (re-render view according to updated state). They are\ncalled inside EventManager which manages asynchronous function calls and updates UI automatically\nafter completing calling current stack of asynchronous functions. In order to update UI whenever you\nneed call `refreshUI` method of `runtimeCoreApi`.\n\n## Extending default implementation\n\nDefault implementation of any SDK action is available via `ExtensionClass.superclass` property. In\norder to extend default action behavior you need to redefine corresponding SDK action and use the\n`ExtensionClass.superclass` to access base implementation:\n\n```javascript\nfunction createGlobalEventHandlersExtension(ExtensionClass) {\n    var callCustomAssemblyHandlerName =\n        global.App.runtimeCoreApi.sdkEventHandlerNames.CALL_CUSTOM_ASSEMBLY;\n    ExtensionClass.prototype[callCustomAssemblyHandlerName] = function(assemblyName) {\n        // e.g. update PI_FirstName in runtime data\n        this.coreApi.updateRuntimeData({\n            caseData: [\n                {\n                    name: 'PI_FirstName',\n                    value: 'Andrew',\n                    formattedValue: 'Andrew',\n                    isValid: 'true'\n                }\n            ],\n            shouldReplaceSavedData: false\n        });\n\n        // call default implementation of callCustomAssembly and return the resulting promise,\n        // which resolves in data provided by a custom assembly (if any)\n        return this.superclass.callCustomAssembly(assemblyName);\n    };\n}\n```\n\n## Overriding default implementation\n\nIn order to override default action behavior you just need to redefine a corresponding SDK action in\nExtensionClass prototype:\n\n```javascript\nfunction createGlobalEventHandlersExtension(ExtensionClass) {\n    var callCustomAssemblyHandlerName =\n        global.App.runtimeCoreApi.sdkEventHandlerNames.CALL_CUSTOM_ASSEMBLY;\n    ExtensionClass.prototype[callCustomAssemblyHandlerName] = function(assemblyName) {\n        console.log(\"Don't really call:\", assemblyName);\n    };\n}\n```\n\n## Runtime core API functions\n\nRuntime API functions are available through `ExtensionClass.coreApi` property (available only inside\n`ExtensionClass` methods). Also this `API` is exposed globally: `global.App.runtimeCoreApi`. <br>\nDocumentation of API methods is available in the `API` section of this guide.\n\n## Embedding runtime into page\n\nTo do that, on your web page wrapper element for runtime should be created. Plus, you have to design\nJS function which should find and return this wrapper element.\n\nExample: The next wrapper is created: `<div id=\"runtime-entry\"></div>` To embed runtime application\ninto this wrapper you need to create the next function:\n\n```js\nglobal.App.getRuntimeEntryPoint = function() {\n    return document.querySelector('#runtime-entry');\n};\n```\n\nThis function should be defined after `global` is defined.\n\n## Working with JavaScript Custom Assemblies\n\nThe JavaScript (JS) Custom Assemblies (CA) are services (technically just JS functions) which loaded\ndirectly to client as script and work without any network activity, unlike default custom\nassemblies. To load JS CA and make it available for the application it should be initialized in\n`global.App.jsCA` object by default:\n\n```html\n<script>\n    (function () {\n        function setFullNameCaFunction() {\n            // this points to ExtensionClass\n            const clientData = this.coreApi.getRuntimeData();\n\n            const firstName = clientData.FirstName.value;\n            const lastName = clientData.LastName.value;\n            const fullName = firstName + \" \" + lastName;\n\n            this.coreApi.updateRuntimeData({\n                caseData: [\n                    {\n                        name: 'FullName',\n                        value: fullName,\n                        formattedValue: fullName\n                    }\n                ]\n            });\n        }\n\n        window.global = window.global || {};\n\n        global.App = global.App || {};\n\n        global.App.jsCA = {\n            setFullNameCa: setFullNameCaFunction\n        }\n    })();\n</script>\n```\n\nThe format of `global.App.jsCA` object is the following:\n\n```js\nglobal.App.jsCA = { key: value };\n```\n\nwhere: `key` - name of the JS CA which is set to `call_js_service` action in screen designer.\n`value` - JS function which should be executed when `call_js_service` action occurs.\n\n**IMPORTANT** JS CA function must be implement in **synchronous** way while using it inside Rule's\n`call_js_service` action. It possible to run asynchronous code ONLY for Event's `call_js_service`\naction.\n\nIt is also possible to override default behaviour how to invoke JS CA. There is a method in SDK\n`ExtensionClass` called `callJsCustomAssembly`. Please check section `Overriding default\nimplementation` to understand how to override it.\n\n## Triggering Actions and Events\n\n### General information\n\nApplication uses messages to communicate with its container (for example if it's opened in an\niframe). A container may send messages to the Application, thus requesting it to perform certain\nactions. In its turn the Application sends messages to container to notify it about events which\nhappen inside the Application.\n\n#### Incoming Messages (handled by Application)\n\nIn order to trigger an action in the Application, send a message to it. Syntax:\n\n```js\napplicationWindow.postMessage({ type: '<INCOMING_MESSAGE_TYPE>' [, data: <OPTIONAL_DATA_OBJECT>] }, '*');\n```\n\nAll incoming messages generate a \"feedback\" message, which provides a status of the requested action\nexecution. See the \"Outgoing Messages\" section below with detailed description of these messages.\n\n##### Types of incoming messages:\n\n* `BEFORE_LEAVE_SCREEN_REQUEST`\n\nTriggers the \"Before Leave\" action on a current screen.\n\n```js\napplicationWindow.postMessage({ type: 'BEFORE_LEAVE_SCREEN_REQUEST' }, '*');\n```\n\n* `SAVE_CLIENT_DATA_REQUEST`\n\nTriggers saving of client data.\n\n```js\napplicationWindow.postMessage({ type: 'SAVE_CLIENT_DATA_REQUEST' }, '*');\n```\n\n* `VIEW_PDF_REQUEST`\n\nTriggers the \"View PDF\" action.\n\n```js\napplicationWindow.postMessage({ type: 'VIEW_PDF_REQUEST' }, '*');\n```\n\n* `LOAD_CLIENT_DATA_REQUEST`\n\nTriggers loading of client data either from server or from provided parameter. In the latter case no\nserver requests will be sent, provided values override current client data state.\n\nNOTE: You can override default implementation of data loading. See `loadData` method in\nGlobalEventHandlers.\n\n```js\n// load client data from server:\napplicationWindow.postMessage({ type: 'LOAD_CLIENT_DATA_REQUEST' }, '*');\n\n// load client data from provided data object:\napplicationWindow.postMessage(\n    {\n        type: 'LOAD_CLIENT_DATA_REQUEST',\n        clientData: {\n            /* your data here */\n        }\n    },\n    '*'\n);\n```\n\n* `OPEN_SCREEN_REQUEST`\n\nSwitches to a screen with specified name.\n\n```js\napplicationWindow.postMessage(\n    { type: 'OPEN_SCREEN_REQUEST', screenName: '<screen_name_to_open>' },\n    '*'\n);\n```\n\n#### Outgoing Messages (sent by Application)\n\nIn order to handle messages sent by the Application inside a container, use event listeners. Syntax:\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === OUTGOING_MESSAGE_TYPE) {\n        // where OUTGOING_MESSAGE_TYPE is one of supported message types\n        var messageData = e.data.data;\n        // do something\n    }\n});\n```\n\n##### Types of outgoing messages :\n\n* `OPEN_SCREEN_REQUEST_SUCCESS`, `OPEN_SCREEN_REQUEST_FAILED`\n\n\"Feedback\" messages for `OPEN_SCREEN_REQUEST`.\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'OPEN_SCREEN_REQUEST_SUCCESS') {\n        // handle successful case\n    }\n    if (e.data.type === 'OPEN_SCREEN_REQUEST_FAILED') {\n        var error = e.data.data; // error object\n        // handle error\n    }\n});\n```\n\n* `BEFORE_LEAVE_SCREEN_SUCCESS`, `BEFORE_LEAVE_SCREEN_FAILED`\n\n\"Feedback\" messages for `BEFORE_LEAVE_SCREEN_REQUEST`.\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'BEFORE_LEAVE_SCREEN_SUCCESS') {\n        // handle successful case\n    }\n    if (e.data.type === 'BEFORE_LEAVE_SCREEN_FAILED') {\n        var error = e.data.data; // error object\n        // handle error\n    }\n});\n```\n\n* `SAVE_CLIENT_DATA_SUCCESS`, `SAVE_CLIENT_DATA_FAILED`\n\n\"Feedback\" messages for `SAVE_CLIENT_DATA_REQUEST`.\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'SAVE_CLIENT_DATA_SUCCESS') {\n        // handle successful case\n    }\n    if (e.data.type === 'SAVE_CLIENT_DATA_FAILED') {\n        var error = e.data.data; // error object\n        // handle error\n    }\n});\n```\n\n* `VIEW_PDF_SUCCESS`, `VIEW_PDF_FAILED`\n\n\"Feedback\" messages for `VIEW_PDF_REQUEST`.\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'VIEW_PDF_SUCCESS') {\n        // handle successful case\n    }\n    if (e.data.type === 'VIEW_PDF_FAILED') {\n        var error = e.data.data; // error object\n        // handle error\n    }\n});\n```\n\n* `LOAD_CLIENT_DATA_SUCCESS`, `LOAD_CLIENT_DATA_FAILED`\n\n\"Feedback\" messages for `LOAD_CLIENT_DATA_REQUEST`.\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'LOAD_CLIENT_DATA_SUCCESS') {\n        // handle successful case\n    }\n    if (e.data.type === 'LOAD_CLIENT_DATA_FAILED') {\n        var error = e.data.data; // error object\n        // handle error\n    }\n});\n```\n\n* `BEFORE_LOAD_SCREEN_FAILED`, `BEFORE_LOAD_SCREEN_SUCCESS`\n\n\"Feedback\" messages for internal action \"Before Load Screen\", which cannot be triggered from an\noutside container and occurs whenever current screen switches to another one.\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'BEFORE_LOAD_SCREEN_FAILED') {\n        // handle successful case\n    }\n    if (e.data.type === 'BEFORE_LOAD_SCREEN_SUCCESS') {\n        var error = e.data.data; // error object\n        // handle error\n    }\n});\n```\n\n* `UPLOAD_FILE`\n\nFired when \"Upload File\" action is executed inside the Application.\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'UPLOAD_FILE') {\n        var defaultFileName = e.data.data; // default file name specified in the \"UploadFile\" action\n        // process action\n    }\n});\n```\n\n* `SHOW_ATTACHMENT_LIST`\n\nFired when \"Show Attachments\" action is executed inside the Application.\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'SHOW_ATTACHMENT_LIST') {\n        // process action\n    }\n});\n```\n\n* `START_ESIG_UI`\n\nFired when \"Start eSig UI\" action is executed inside the Application.\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'START_ESIG_UI') {\n        // do appropriate stuff\n    }\n});\n```\n\n* `FINISH_ESIG_UI`\n\nFired when \"Finish eSig UI\" action is executed inside the Application.\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'FINISH_ESIG_UI') {\n        // do appropriate stuff\n    }\n});\n```\n\n* `MULTIPLE_EDITING_FAILED`\n\nFired when a server request returns the \"MULTIPLE_EDITING_BLOCK\" error.\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'MULTIPLE_EDITING_FAILED') {\n        // do appropriate stuff\n    }\n});\n```\n\n* `UPDATE_SESSION_TIMER_REQUEST`\n\nFired before each request to server to allow performing any required actions, e.g. update session\ntimer.\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'UPDATE_SESSION_TIMER_REQUEST') {\n        // process event\n    }\n});\n```\n\n* `UPDATE_FIRST_AND_LAST_NAME_REQUEST`\n\nFired on any value change inside the application. Contains values of \"PIFirstName\" and \"PILastName\"\nclient data items.\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'UPDATE_FIRST_AND_LAST_NAME_REQUEST') {\n        var firstName = e.data.data.PIFirstName;\n        var lastName = e.data.data.PILastName;\n        // process retrieved values\n    }\n});\n```\n\n* `START_SCREEN_CHANGING`\n\nFired on navigation between screens. Indicates the start of the screen changing process. Contains\nname of the next screen \"screenName\".\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'START_SCREEN_CHANGING') {\n        var screenName = e.data.screenName;\n        // process event\n    }\n});\n```\n\n* `FINISH_SCREEN_CHANGING`\n\nFired on navigation between screens. Indicates the finish of the screen changing process. Contains\nname of the new screen \"screenName\".\n\n```js\nwindow.addEventListener('message', function(e) {\n    if (e.data.type === 'FINISH_SCREEN_CHANGING') {\n        var screenName = e.data.screenName;\n        // process event\n    }\n});\n```\n\n## UI Configuration\n\nYou can use configs/uiConfig.json file to adopt the user interface to your company's specific\nRequirements.\n\n### Screen navigation panel\n\nThe screen navigation panel's visibility is handled changing show_nav_panel property: `true` to\nshow, `false` to hide. By default the screen navigation panel is visible(show_nav_pane: 'true').\n\n### Backspace behavior\n\nBackspace to go `back` action in non-Chrome browsers could be controlled by\n`disable_backspace_navigation` property: `true` to disable moving backwards through the browser\nhistory, `false` to enable moving backwards through browser history. Note that Chrome disables going\nback by history by itself.\n\n### Applying custom styles and fonts\n\nExported application includes all required stylesheets by default. However you can replace any\ndefault stylesheet with custom one. To do it, open styles.html file and just update href attribute\nof particular <link> (HTML element) to point it to your custom resource. All default stylesheets are\nwrapped in comments with name of the resource that <link> element will load.\n\nAlso note that all style link elements should be put inside the wrapping <noscript id=\"deferred-styles\">\ntag to allow loading them in a deferred manner to avoid blocking the runtime application HTML rendering.\nThis is required for displaying the loading spinner.\n\nstyles.html\n\n```html\n<noscript id=\"deferred-styles\">\n    <!--fonts-->\n        <link href=\"{{staticsPath}}/assets/runtime-fonts-fb9249627a6a1adfb091.css\" rel=\"stylesheet\">\n    <!--fonts-->\n\n    <!--font-awesome-->\n        <link href=\"{{staticsPath}}/assets/runtime-font-awesome-50cc4c94e470f2e05632.css\" rel=\"stylesheet\">\n    <!--font-awesome-->\n\n    <!--bootstrap-theme-->\n        <link href=\"{{staticsPath}}/assets/runtime-bootstrap-theme-9a029d11b10303249111.css\" rel=\"stylesheet\">\n    <!--bootstrap-theme-->\n\n    <!--bootstrap-overrides-->\n        <link href=\"{{staticsPath}}/assets/runtime-bootstrap-overrides-9a029d11b10304564654.css\" rel=\"stylesheet\">\n    <!--bootstrap-overrides-->\n\n    <!--bootstrap-controls-->\n        <link href=\"{{staticsPath}}/assets/runtime-controls-518eaa3f2883aa62e72f.css\" rel=\"stylesheet\">\n    <!--bootstrap-controls-->\n\n    <!--runtime-styles-->\n        <link href=\"{{staticsPath}}/assets/runtime-a501552b175aef3fa4f4.css\" rel=\"stylesheet\">\n    <!--runtime-styles-->\n\n    <!--browser-fixes-->\n        <link href=\"{{staticsPath}}/assets/runtime-browser-fixes-fb9249627a6df67d7df22.css\" rel=\"stylesheet\">\n    <!--browser-fixes-->\n</noscript>\n```\n\nIf you want to update for example bootstrap theme just replace href attribute of <link> to use\ndifferent URI. Same works for fonts and other styles.\n\nstyles.html\n\n```html\n<!--bootstrap-theme-->\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n<!--bootstrap-theme-->\n```\n",
    "longname": "/var/lib/jenkins/workspace/Screen Designer/NGEN - Screen Designer/ngen_screen_designer-0.107.5/src/runtime/sdk/SDK-user-guide.md",
    "name": "./src/runtime/sdk/SDK-user-guide.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/var/lib/jenkins/workspace/Screen Designer/NGEN - Screen Designer/ngen_screen_designer-0.107.5/src/runtime/sdk/CHANGELOG.md",
    "name": "./src/runtime/sdk/CHANGELOG.md",
    "content": "# Changelog\n\nAll notable changes to SDK will be documented in this file.\n\n## [Unreleased]\n\n* Think about moving SDK to separate repository\n* Removed iGo references from SDK documentation\n\n## [0.106.*]\n\n### Added\n\n* methods to shared SDK:\n    - `needToAutoValidateScreens`\n    - `autoValidateScreens`\n\n* Runtime core API methods:\n    - `openNextVisibleScreen`\n    - `openScreenByName`\n    - `openFirstIncompleteScreen`\n\n### Changed\n\n* Runtime core API methods:\n    - `showLoader`: added new param - loaderId, added ability to pass custom message which would be shown under spinner and updated docs\n    - `hideLoader`: added new param - loaderId, update docs\n    - `renderUploadFileComponent` method receives now new properties: maxFileNameLength, maxDescriptionLength; method doesn't receive now next properties: uploadFileEndpoint, uploadSucceedCallback\n\n## [0.102.*]\n\n### Changed\n\n* `activateFormPackage` method now supports two implementations via launchdarkly. Old one when the request is sent to server to perform an operation. New one when fields are updated on client side without any network activity, which should be faster.\n\n## [0.97.*]\n\n### Added\n\n* New method to Esig SDK - `requestAuthToken`\n\n## [0.96.*]\n\n### Changed\n\n* Changed the way CSS resources are loaded for the runtime application. See \"Applying custom styles and fonts\" section of the \"SDK User Guide\".\n\n## [0.93.*]\n\n### Changed\n\n* Renamed method `ESIGUI_checkSigningStatus` to `ESIGUI_getSigningStatus`\n* `validateCreditCard` request now sends additional options taken from fourth parameter:\n  'ftniRequestOptions': defaultStatus, DoNotUpdateCustomer, DoNotUseCustomerName,\n  DoNotUseCustomerAddress\n\n## [0.92.2]\n\n### Added\n\n* `closeEsigUiApp` method introduced in `SharedGlobalEventHandlers` to handle closing eSigUI\n  application.\n\n### Changed\n\n* `ESIGUI_finishSigning` method introduced in `ESigEventHandlers` to notify host application about\n  closing.\n\n## [0.92.*]\n\n### Added\n\n* `SharedGlobalEventHandlers` class. Its instance object is used to extend the `GlobalEventHandlers`\n  with functionality to start eSigUI:\n  * `ESIGUI_startSigning`\n* `initialLoadData` method introduced in `ESigEventHandlers` to handle eSigUI initializing on\n  application run;\n\n### Changed\n\n* `ESigEventHandlers` to independent SDK with eSigUI-specific functionality;\n* Extract method `ESIGUI_startSigning` from `ESigEventHandlers` to `SharedGlobalEventHandlers` SDK;\n\n## [0.91.*]\n\n### Added\n\n* Runtime core API methods: `convertSmartyStreetsPredictions`, `convertGooglePlacesPredictions`,\n  `parseSmartyStreetsAddress`, `parseGooglePlacesAddress`, `getStringProductPropertyByName`\n* Global Event Handlers: `getSmartyStreetsPredictions`, `getGooglePlacesPredictions`,\n  `getSmartyStreetsDetails`, `getGooglePlacesDetails`\n\n### Changed\n\n* IGo Specific Global Event Handlers' method `viewPDF` now calls predefined CA if its name was\n  specified.\n* jQuery was updated to 3.3.1\n* bootstrap was updated to 3.3.7 to support 3.x.x versions of jQuery\n\n## [0.90.*]\n\n### Added\n\n* Runtime core API methods:\n  * `getDestiny`\n\n## [0.89.*]\n\n### Added\n\n* `ESigEventHandlers` class. Its instance object is used to extend the `GlobalEventHandlers` with\n  eSigUI-specific functionality:\n  * `ESIGUI_acceptConsent`\n  * `ESIGUI_acceptDisclosure`\n  * `ESIGUI_captureEvent`\n  * `ESIGUI_checkSigningStatus`\n  * `ESIGUI_declineConsent`\n  * `ESIGUI_declineDisclosure`\n  * `ESIGUI_finishSigning`\n  * `ESIGUI_flushAuditTrail`\n  * `ESIGUI_getVendorURL`\n  * `ESIGUI_startSigning`\n  * `ESIGUI_viewPDF`\n* Runtime core API methods:\n  * `generateIndexHtmlForNested`\n\n## [0.87.*]\n\n### Added\n\n* Runtime core API methods: `renderUploadFileComponent`, `renderShowAttachmentsComponent`,\n  `getApiEndpoint`\n* Global Event Handlers: `uploadFile`, `showAttachments`\n\n## [0.85.*]\n\n### Added\n\n* Runtime core API methods: `getUserDataTypeByName`\n* Global Event Handlers: `retrieveParamedSchedulerUrl`, `checkParamedSchedulerStatus`\n\n### Changed\n\n* `USER_DATA` item is appended to runtime core API object `runtimeStateItems`\n* Runtime core API method `getRuntimeState` now supports USER_DATA runtime state item to retrieve\n  the user data object\n\n## [0.84.*]\n\n### Added\n\n* Runtime core API methods: `showModal`, `hideModal`\n\n### Changed\n\n* **(Breaking)** `exportFormFromIGO` from GlobalEventHandlers renamed to `viewPDF`.\n\n## [0.83.*]\n\n### Added\n\n* Runtime core API methods: `restoreDefaultValues`, `getRuntimeDirtyData`\n\n## [0.82.*]\n\n### Changed\n\n* **(Breaking)** Runtime core API method `getRuntimeState` being called without arguments now\n  returns an object with all runtime state items including `previousScreenName`. In previous\n  versions of API it returned an object with only `previousScreenName`)\n* **(Warning)** Runtime core API methods `getRuntimeData` and `updateRuntimeData` are now deprecated\n  and will be removed in one of future releases. `getRuntimeState` and `updateRuntimeState` should\n  be used instead\n* Runtime core API method `getRuntimeState` now accepts array of items to retrieve as a parameter\n  and returns the object with all specified parameters (in previous versions of API it returned an\n  object with only `previousScreenName`)\n* `loadData` now accepts data to load as a parameter. If it's undefined then `loadData` tries to\n  load the data from the server (by default and as it was before).\n* Runtime core API method `updateRuntimeData` can now also accept data in format returned by\n  `getRuntimeData` method\n\n### Added\n\n* Runtime core API methods: `resetRuntimeState`, `restoreRuntimeState`, `updateRuntimeState`,\n  'getFieldByName'\n* Runtime core API constant: `runtimeStateItems` which contains names of runtime state items used in\n  `getRuntimeState`, `resetRuntimeState`, `restoreRuntimeState`, `updateRuntimeState` API methods\n* Runtime core API constant: `sdkEventHandlerNames` which contains names of events that can be\n  handled via SDK.\n\n## [0.79.*]\n\n### Changed\n\nThe following change is not Breaking unless you use Javascript custom assemblies.\n\n* Two methods in GlobalEventHandlers: `getSourceDropdownData` and `getSourceGridData` are updated to\n  load data from javascript custom assembly first. If JS custom assembly is missing, request is sent\n  to the server.\n\n## [0.77.*]\n\n### Added\n\n* `callJsCustomAssembly` method introduced in GlobalEventHandlers to handle new action\n  `call_js_service` in screen designer\n\n## [0.75.*]\n\n### Changed\n\nThe following changes may be considered as breaking if you are using custom stylesheets instead of\ndefault.\n\n* **(Breaking)** Controls styles extracted to separate bundle runtime-controls.css. List of changes:\n\n  * Controls styles extracted from runtime.css to runtime-controls.css\n  * Styles for radio and checkbox buttons updated and moved from runtime-bootstrap-overrides.css to\n    runtime-controls.css bundle\n  * Radio/Checkbox button control's CSS classes updated:\n\n    * btn-group class removed\n    * btn-group-vertical class renamed to radio-group-vertical\n    * btn and btn-_ classes renamed to input-btn and input-btn-_ classes accordingly\n\n## [0.74.*]\n\n### Changed\n\n* Third party styles extracted from runtime.css to separate style sheets:\n  * runtime-bootstrap-theme.css\n  * runtime-bootstrap-overrides.css\n  * runtime-fonts.css\n  * runtime-font-awesome.css\n  * runtime-browser-fixes.css\n\n## [0.74.*]\n\n### Changed\n\n* `validateCreditCard` request now sends additional parameters taken from client data:\n  ProcessingInstruction, Field1, Field2, FieldDelimiter, LedgerData\n\n## [0.73.*]\n\n### Added\n\n* `callServerProcedure` to GlobalEventHandlers\n* `applyEsign` to GlobalEventHandlers\n* `declineEsign` to GlobalEventHandlers\n* `activateFormPackage` to GlobalEventHandlers\n* `exportFormFromIGO` to GlobalEventHandlers\n* `sendEmail` to GlobalEventHandlers\n* `callLogger` to GlobalEventHandlers\n\n## [0.72.*]\n\n### Added\n\n* css namespacing page\n* ability to use namespaced css\n\n## [0.71.*]\n\n> 2017-10-16\n\n### Changed\n\n* jQuery and Bootstrap extracted from runtime.js and are loaded separately in `scripts.html`\n* All scripts in `scripts.html` are loaded with `defer` attribute\n\n## [0.70.*]\n\n> 2017-09-07\n\n### Added\n\n* CHANGELOG.md\n* expose runtime core api to global scope (`global.App.runtimeCoreApi`)\n* add `loadData` to GlobalEventHandlers\n* add `refreshUI` method to runtime core api\n\n### Changed\n\n* **(Breaking)** rename `api` to `coreApi` inside `GlobalEventHandlers.js`\n* **(Breaking)** `global.GlobalEventHandlers` --> `global.App.__globalEventHandlers`\n\n---\n\n---\n\n## [Example]\n\n> 2055-01-01\n\n### Added\n\n* Support `blabla` on `blabla`\n  ### Changed\n* Method `meow` should do it louder\n* **(Breaking)** Method `alibaba` should show pink `gin` now\n  ### Removed\n  ### Deprecated\n  ### Fixed\n  ### Security\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/var/lib/jenkins/workspace/Screen Designer/NGEN - Screen Designer/ngen_screen_designer-0.107.5/src/runtime/sdk/data format.md",
    "name": "./src/runtime/sdk/data format.md",
    "content": "# Data interchange format between Server and Runtime (how data is stored inside runtime core)\n\n### SD Runtime fields data:\n\n```\nfieldName: {\n    value: 'val',\n    formattedValue: 'formattedval'\n}\n\nanotherFieldName: {\n    value: '123'\n    formattedValue: '$123'\n}\n```\n\n### Corresponding Server fields data:\n\n```\n...\nfieldName = 'val',\nfieldName_fmt = 'formattedval',\nanotherFieldName = '123',\nanotherFieldName_fmt = '$123',\n...\n```\n\n---\n\n### SD Runtime SourceDropdown control data:\n\n```\n// Single select dropdown:\nsourceDropdownName: {\n\tvalue: 'selectedOptionValue',\n\tformattedValue: 'selectedOptionName'\n\tdata: {\n\t    options: [{\n            opt1: \"opt1value\",\n            anotheropt: \"anotherValue\"\n        }\n    ]}\n}\n\n\n// Multiselect dropdown (with 3 selected values):\n\nmultiSourceDropdownName: {\n    value: 'val1,val2,val3',\n    formattedValue: 'name1,name2,name3'\n    data: {\n        options: [\n            {\n                opt1: \"opt1value\",\n                anotheropt: \"anotherValue\"\n            },\n            {\n                somethig: \"someOtherValue\"\n            },\n            {\n                // no additional options\n            }\n        ]\n    }\n}\n```\n\n### Corresponding Server SourceDropdown control data:\n\ncases:\n\n    // Single select dropdown:\n    ...\n    sourceDropdownName = 'selectedOptionValue',\n    sourceDropdownName_fmt = 'selectedOptionName',\n    sourceDropdownName||options = '[{\"name\":\"selectedOptionName\", \"value\":\"selectedOptionValue\", \"opt1\":\"opt1value\", \"anotheropt\":\"anotherValue\"}]'\n    ...\n\n    // Multiselect dropdown (with 3 selected values):\n    ...\n    multiSourceDropdownName = 'val1,val2,val3',\n    multiSourceDropdownName_fmt = 'name1|name2|name3',\n    multiSourceDropdownName||options = '[{\"name\":\"val1\", \"value\":\"name1\", \"opt1\":\"opt1value\", \"anotheropt\":\"anotherValue\"}, {\"name\":\"val2\", \"value\":\"name2\", \"something\":\"someOtherValue\"}, {\"name\":\"val3\", \"value\":\"name3\"}]'\n    ...\n\n    NOTES:\n    1. \"fieldName__options\" key contains double-underscore\"\n    2. \"fieldName__options\" should contain valid JSON in a string\n    3. \"fieldName__options\" should contain all data for a selected option, including \"name\" and \"value\" despite they are already available in fieldName and fieldName_fmt.\n\n---\n\n### SD Runtime Grid control data:\n\n```\ngridName: {\n    data: [{                       // first row\n        col1: {\n            value: 'john',\n            formattedValue: 'johnny'\n        },\n        col2: {\n            value: '123',\n            formattedValue: '$123'\n        }\n    },{                            // second row\n        col1: {\n            value: 'don',\n            formattedValue: 'donny'\n        },\n        col2: {\n            value: '9',\n            formattedValue: '$9'\n        }\n    }]\n}\n```\n\n### Corresponding Server Grid control data:\n\n```\n// NOTE: grid name is not used!\n...,\ncol1__1 = 'john',\ncol1__1_fmt = 'johnny',\ncol2__1 = '123',\ncol2__1_fmt = '$123',\ncol1__2 = 'don',\ncol1__2_fmt = 'donny',\ncol2__2 = '9',\ncol2__2_fmt = '9',\n...\n```\n\n---\n\n### SD Runtime SourceGrid control data:\n\n```\nsourceGridName: {\n    data: [{                        // first row\n        \"row-id\": {                 // \"row-id\" is predefined name\n            value: 'id1',           // \"row-id\" values are unique across source grid rows\n            formattedValue: ''\n        },\n        col1: {\n            value: 'john',\n        },\n        col2: {\n            value: '123',\n            formattedValue: '$123'\n        }\n    },{                             // second row\n        \"row-id\": {\n            value: 'id2',\n                formattedValue: ''\n        },\n        col1: {\n            value: 'don',\n        },\n        col2: {\n            value: '9',\n            formattedValue: '$9'\n        }\n    }]\n}\n```\n\n### Corresponding Server SourceGrid control data:\n\n```\n// NOTE: grid name is not used!\n...,\nsourceGridName = '[{\"row-id\":{\"value\":\"id1\",\"formattedValue\":\"\"},\"col1\":{\"value\":\"john\"},\"col2\":{\"value\":\"123\",\"formattedValue\":\"$123\"}},{\"row-id\":{\"value\":\"id1\",\"formattedValue\":\"\"},\"col1\":{\"value\":\"don\"},\"col2\":{\"value\":\"9\",\"formattedValue\":\"$9\"}}]'\n...\n```\n\n---\n\n### SD Runtime Mask control data:\n\n```\nmaskcontrolName: {\n\tvalue: 'value',\n\tformattedValue: 'formatted-value',\n\tdata: {\n\t\tmaskedValue: 'masked-value'\n\t}\n}\n```\n\n### Corresponding Server Mask control data:\n\ncases:\n\n```\n// properties for maskcontrolName 'showMaskedCharactersInPDF' and 'encrypt' = false\n\nmaskcontrolName = 'value',\nmaskcontrolName_fmt = 'formatted-value',\nmaskcontrolName_enc = false\n// NOTE: maskcontrolName_msk doesn't added\n\n// 'showMaskedCharactersInPDF' and 'encrypt' = true\n\nmaskcontrolName = 'value',\nmaskcontrolName_fmt = 'formatted-value',\nmaskcontrolName_msk = 'masked-value',\nmaskcontrolName_enc = true\n```\n\n---\n\n### SD Runtime SoftLocked data:\n\n```\nname: {\n    value: 'value',\n    formattedValue: 'formatted-value'\n}\n\n// in case when control belongs to softLocked screen:\nlockedName: {\n    value: 'value',\n    formattedValue: 'formatted-value',\n    locked: true\n}\n\n// in case when control empty and belongs to softLocked screen:\nemptyLockedName: {\n    locked: true\n}\n\ngridName: {\n    data: [{\n        col1: {\n            value: 'john',\n            formattedValue: 'johnny'\n        },\n        col2: {\n            value: '123',\n            formattedValue: '$123'\n        }\n    }],\n    locked: true\n}\n```\n\n### Corresponding Server SoftLocked data:\n\n```\n...,\nname ='value',\nname_fmt = 'formatted-value',\n...,\n\n\n...,\nlockedName ='value',\nlockedName_fmt = 'formatted-value',\nlockedName_lck = true,\n...,\n\n\n...,\nemptyLockedName_lck = true,\n...,\n\n...,\ncol1__1 = 'john',\ncol1__1_fmt = 'johnny',\ncol1__1_lck = true,\ncol2__1 = '123',\ncol2__1_fmt = '$123',\ncol2__1_lck = true,\n...,\n```\n\n---\n\n### SD Runtime Email control data\n\n```\nemailName: {\n    value: 'value@of.value',\n    formattedValue: 'formattedvalue@of.formattedvalue',\n    data: {\n        status: 'error',\n        message: 'blue sky'\n    }\n}\n```\n\n### Corresponding Server Email control data:\n\n```\nemailName: 'value@of.value',\nemailName_fmt: 'formattedvalue@of.formattedvalue',\nemailName_emdata: \"{\\\"status\\\":\\\"error\\\",\\\"message\\\":\\\"blue sky\\\"}\"\n```\n\n---\n\n### SD Runtime CreditCard control data\n\n```\ncreditCardName: {\n  value: {\n    controlsValues: {\n      cardholder: {\n        value: 'John Doe',\n        formattedValue: 'John Doe',\n\n      },\n      street: {\n        value: '1st Ave',\n        formattedValue: '1st Ave',\n\n      },\n      city: {\n        value: 'Lost city',\n        formattedValue: 'Lost city',\n\n      },\n      province: {\n        value: 'Provincia',\n        formattedValue: 'Provincia',\n\n      },\n      state: {\n        value: 'Alaska',\n        formattedValue: 'Alaska',\n\n      },\n      country: {\n        value: 'USA',\n        formattedValue: 'USA',\n\n      },\n      zip: {\n        value: '12345',\n        formattedValue: '12345-____',\n\n      },\n      amount: {\n        value: \"100\",\n        formattedValue: \"$100\"\n      }\n    },\n    maskedValues: {\n      ccn: {\n        value: '************1234',\n        formattedValue: '************1234',\n\n      },\n      cvv: {\n        value: '***',\n        formattedValue: '***',\n\n      },\n      ced: {\n        value: '**/**',\n        formattedValue: '**/**',\n\n      }\n    }\n  },\n  data: {\n    status: 'valid',\n    message: 'Hulala'\n  }\n}\n```\n\n### Corresponding Server CreditCard control data:\n\n```\ncreditCardName: '\"{\n  \"controlsValues\": {\n    \"cardholder\": {\n      \"value\": \"John Doe\",\n      \"formattedValue\": \"John Doe\"\n    },\n    \"street\": {\n      \"value\": \"1st Ave\",\n      \"formattedValue\": \"1st Ave\"\n    },\n    \"city\": {\n      \"value\": \"Lost city\",\n      \"formattedValue\": \"Lost city\"\n    },\n    \"province\": {\n      \"value\": \"Provincia\",\n      \"formattedValue\": \"Provincia\"\n    },\n    \"state\": {\n      \"value\": \"Alaska\",\n      \"formattedValue\": \"Alaska\"\n    },\n    \"country\": {\n      \"value\": \"USA\",\n      \"formattedValue\": \"USA\"\n    },\n    \"zip\": {\n      \"value\": \"12345\",\n      \"formattedValue\": \"12345-____\"\n    },\n    amount: {\n      \"value\": \"100\",\n      \"formattedValue\": \"$100\"\n    }\n  },\n  \"maskedValues\": {\n    \"ccn\": {\n      \"value\": \"************1234\",\n      \"formattedValue\": \"************1234\"\n    },\n    \"cvv\": {\n      \"value\": \"***\",\n      \"formattedValue\": \"***\"\n    },\n    \"ced\": {\n      \"value\": \"**/**\",\n      \"formattedValue\": \"**/**\"\n    }\n  }\n}\"',\n// no _fmt\n// credit card data shouldn't go to Server!\n```\n\n---\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/var/lib/jenkins/workspace/Screen Designer/NGEN - Screen Designer/ngen_screen_designer-0.107.5/src/runtime/sdk/css namespacing.md",
    "name": "./src/runtime/sdk/css namespacing.md",
    "content": "# CSS namespacing\n\nRuntime package contains css files which could conflict with parent web site ( in case of embedding\nruntime app into web page ). Therefore SDK provides ability to resolve such sort of conflicts via\ngenerating `namespaced` css files. In case you have css conflicts you need to manually change path\nto css files inside `styles.html`.\n\nExample:\n\n```html\n<link href=\"{{staticsPath}}/assets/runtime-d9062fc459f15ab12eab.css\" rel=\"stylesheet\">\n```\n\nto\n\n```html\n<link href=\"{{staticsPath}}/assets/namespacedCss/runtime-d9062fc459f15ab12eab.css\" rel=\"stylesheet\">\n```\n\nBe aware that runtime root html element (which is configured via `global.App.getRuntimeEntryPoint`\nsee `Embedding runtime into page` section) should have specific css class. By default it's `__` but\nmaybe changed at screen designer build time.\n",
    "static": true,
    "access": "public"
  }
]